{"version":3,"file":"js/2937-1fa7d52fbb4c3d551347.chunk.js","mappings":"+KAAA,IAAIA,EAAYC,OAAOC,eACnBC,EAAS,CAACC,EAAQC,IAAUL,EAAUI,EAAQ,OAAQ,CAAEC,QAAOC,cAAc,IACjF,MAAMC,EACJC,YAAYC,GACVC,KAAKC,gBAAkB,IAAMD,KAAKE,OAClCF,KAAKG,mBAAqB,IAAMH,KAAKI,KACrCJ,KAAKK,IAAM,IAAML,KAAKM,YAAYC,SAAWP,KAAKI,KAClDJ,KAAKQ,IAAM,IAAoB,IAAdR,KAAKI,KACtBJ,KAAKS,KAAO,IACHT,KAAKM,YAAYI,OAAOV,KAAKI,MAAQJ,KAAKM,YAAYI,OAAOV,KAAKI,MAAQ,KAEnFJ,KAAKW,KAAO,KACV,MAAMC,EAAOZ,KAAKM,YAAYI,OAAOV,KAAKI,MAE1C,OADAJ,KAAKI,OACEQ,CAAI,EAEbZ,KAAKa,IAAOC,IAEV,GADkBd,KAAKe,mBAAmBD,GAIxC,OAFAd,KAAKE,OAASF,KAAKI,KACnBJ,KAAKI,OACEJ,KAAKM,YAAYI,OAAOV,KAAKI,KAAO,EAEhC,EAEfJ,KAAKgB,SAAYC,IACf,IAAIC,EAAYlB,KAAKe,mBAAmBE,GACpCE,GAAS,EAKb,IAJID,IACFC,EAASD,EACTlB,KAAKE,OAASF,KAAKI,MAEdc,GACLlB,KAAKI,OACLc,EAAYlB,KAAKe,mBAAmBE,GACpCE,GAAS,EAEX,OAAOA,CAAM,EAEfnB,KAAKoB,SAAW,IAAMpB,KAAKgB,SAAS,cACpChB,KAAKqB,UAAY,KACfrB,KAAKI,KAAOJ,KAAKM,YAAYC,MAAM,EAErCP,KAAKsB,OAAUC,IACbvB,KAAKI,KAAOmB,CAAQ,EAEtBvB,KAAKiB,MAAQ,CAACH,EAASU,GAAU,EAAMC,GAAW,KAChD,IAAIC,EAAQ,KACRT,EAAQ,KACZ,GAAuB,kBAAZH,EAAsB,CAE/BG,EADc,IAAIU,OAAOb,EAASW,EAAW,IAAM,KACrCG,KAAK5B,KAAKM,YAAYuB,OAAO7B,KAAKI,KAAMU,EAAQP,SAC9DmB,EAAQZ,CACV,MAAWA,aAAmBa,SAC5BV,EAAQjB,KAAKM,YAAYwB,MAAM9B,KAAKI,MAAMa,MAAMH,GAChDY,EAAkB,OAAVT,QAA4B,IAAVA,OAAmB,EAASA,EAAM,IAE9D,QAAa,MAATA,KACqB,kBAAZH,GAAwBG,aAAiBc,OAAS/B,KAAKM,YAAY0B,WAAWf,EAAM,GAAIjB,KAAKI,UAClGoB,IACFxB,KAAKE,OAASF,KAAKI,KACfsB,GAASA,EAAMnB,SACjBP,KAAKI,MAAQsB,EAAMnB,SAGhBU,EAGC,EAEdjB,KAAKiC,OAAUC,IACblC,KAAKI,MAAQ8B,CAAG,EAElBlC,KAAKmC,OAAS,IAAMnC,KAAKI,KACzBJ,KAAKoC,YAAc,KACjB,MAAMnB,EAAQjB,KAAKM,YAAYW,MAAM,OACrC,IAAIoB,EAAS,EACb,GAAIpB,GAA0B,IAAjBA,EAAMV,OAAc,CAC/B,MAAM+B,EAAcrB,EAAM,GAC1B,IAAIsB,EAAM,EACV,KAAOD,EAAY/B,OAASgC,GACU,IAAhCD,EAAYE,WAAWD,GACzBF,GAAU,EAEVA,IAEFE,GAEJ,CACA,OAAOF,CAAM,EAEfrC,KAAKyC,QAAU,IAAMzC,KAAKM,YAAYwB,MAAM9B,KAAKE,OAAQF,KAAKI,MAC9DJ,KAAKE,OAAS,EACdF,KAAKI,KAAO,EACZJ,KAAKM,YAAcP,CACrB,CACAgB,mBAAmBD,GACjB,MAAM4B,EAAY1C,KAAKM,YAAYI,OAAOV,KAAKI,MAC/C,IAAIc,GAAY,EAMhB,OAJEA,EADqB,kBAAZJ,EACG4B,IAAc5B,EAEdA,aAAmBa,OAASb,EAAQc,KAAKc,GAAa5B,EAAQ4B,GAErExB,CACT,EAEFzB,EAAOI,EAAiB,mBACxB,MAAM8C,EACJ7C,YAAY8C,EAAOC,GACjB7C,KAAK8C,iBAAoBvB,GACnBvB,KAAK4C,MAAMG,OAASxB,EAASwB,KACxB/C,KAAK4C,MAAMF,WAAanB,EAASmB,UAC/B1C,KAAK6C,IAAIE,OAASxB,EAASwB,KAC7B/C,KAAK6C,IAAIH,WAAanB,EAASmB,UAE/B1C,KAAK4C,MAAMG,MAAQxB,EAASwB,MAAQ/C,KAAK6C,IAAIE,MAAQxB,EAASwB,KAGzE/C,KAAK4C,MAAQA,EACb5C,KAAK6C,IAAMA,CACb,CACAG,SAASD,EAAML,GACb1C,KAAK4C,MAAQ,IAAIK,EAASF,EAAML,EAClC,CACAQ,OAAOH,EAAML,GACX1C,KAAK6C,IAAM,IAAII,EAASF,EAAML,EAChC,EAEFjD,EAAOkD,EAAO,SACd,MAAMM,EACJnD,YAAYiD,EAAML,GAChB1C,KAAKmD,kBAAqB5B,GAAavB,KAAK+C,KAAOxB,EAASwB,MAAQ/C,KAAK+C,OAASxB,EAASwB,MAAQ/C,KAAK0C,WAAanB,EAASmB,UAC9H1C,KAAK+C,KAAOA,EACZ/C,KAAK0C,UAAYA,CACnB,CACAU,QAAQL,GACN/C,KAAK+C,KAAOA,CACd,CACAM,aAAaX,GACX1C,KAAK0C,UAAYA,CACnB,EAEFjD,EAAOwD,EAAU,W,yDCxIV,SAASK,EAAyBC,GACvC,IAAIC,EAAMC,EAAOC,EAEbC,EAAYJ,EAAQK,YACpBC,EAAgZ,QAA9XL,EAAoQ,QAA5PC,EAA2G,QAAlGC,EAAmC,OAAdC,QAAoC,IAAdA,OAAuB,EAASA,EAAUG,eAA4C,IAAvBJ,EAAgCA,EAAmC,OAAdC,QAAoC,IAAdA,OAAuB,EAASA,EAAUI,sBAAsC,IAAVN,EAAmBA,EAAsB,OAAdE,QAAoC,IAAdA,OAAuB,EAASA,EAAUK,yBAAwC,IAATR,EAAkBA,EAAqB,OAAdG,QAAoC,IAAdA,OAAuB,EAASA,EAAUM,sBACjfC,EAAyB,EAC7B,MAAO,CACLC,iBAAkB,SAA0BC,GACtCP,EACFN,EAAQc,YAAY,IAAIC,EAAA,EAAa,wDAAyDF,KAI5FF,EAAyB,GAC3BX,EAAQc,YAAY,IAAIC,EAAA,EAAa,2CAA4CF,MAGjFF,EACJ,EAEJ,CCpBO,SAASK,EAAyBhB,GACvC,IAAIiB,EAASjB,EAAQK,YACjBa,EAAwBlF,OAAOmF,OAAO,MACtCC,EAAyBH,EAAS,CACpCI,MAAOJ,EAAOT,eACdc,SAAUL,EAAOR,kBACjBc,aAAcN,EAAOP,uBACnB,CAAC,EACL,MAAO,CACLE,iBAAkBY,EAClBC,gBAAiBD,GAGnB,SAASA,EAAoBX,GAM3B,IALA,IAAIa,EAGAC,EAAuE,QAAhDD,EAAuBb,EAAKe,sBAAqD,IAAzBF,EAAkCA,EAAuB,GAEnIG,EAAM,EAAGA,EAAMF,EAAoB3E,OAAQ6E,IAAO,CACzD,IAAIC,EAAgBH,EAAoBE,GACpCE,EAAYD,EAAcC,UAC1BC,EAA8Bd,EAAsBa,GAEpDX,EAAuBW,GACzB/B,EAAQc,YAAY,IAAIC,EAAA,EAAa,YAAYkB,OAAOF,EAAW,2DAA4DD,IACtHE,EACThC,EAAQc,YAAY,IAAIC,EAAA,EAAa,yBAAyBkB,OAAOF,EAAW,oBAAqB,CAACC,EAA6BF,KAEnIZ,EAAsBa,GAAaD,CAEvC,CAEA,OAAO,CACT,CACF,CCnCO,SAASI,EAAoBlC,GAClC,IAAImC,EAAiBnG,OAAOmF,OAAO,MAC/BF,EAASjB,EAAQK,YACrB,MAAO,CACL+B,qBAAsBC,EACtBC,qBAAsBD,EACtBE,wBAAyBF,EACzBG,oBAAqBH,EACrBI,mBAAoBJ,EACpBK,0BAA2BL,GAG7B,SAASA,EAAcxB,GACrB,IAAI8B,EAAW9B,EAAK+B,KAAKxG,MAEzB,GAAe,OAAX6E,QAA8B,IAAXA,IAAqBA,EAAO4B,QAAQF,GAW3D,OANIR,EAAeQ,GACjB3C,EAAQc,YAAY,IAAIC,EAAA,EAAa,qCAAsCkB,OAAOU,EAAU,MAAQ,CAACR,EAAeQ,GAAW9B,EAAK+B,QAEpIT,EAAeQ,GAAY9B,EAAK+B,MAG3B,EAVL5C,EAAQc,YAAY,IAAIC,EAAA,EAAa,SAAUkB,OAAOU,EAAU,sFAAwF9B,EAAK+B,MAWjK,CACF,C,eC3BO,SAASE,EAAyB9C,GACvC,IAAIiB,EAASjB,EAAQK,YACjB0C,EAAkB9B,EAASA,EAAO+B,aAAehH,OAAOmF,OAAO,MAC/D8B,EAAkBjH,OAAOmF,OAAO,MACpC,MAAO,CACLsB,mBAAoBS,EACpBC,kBAAmBD,GAGrB,SAASA,EAAqBrC,GAC5B,IAAIuC,EAEAT,EAAW9B,EAAK+B,KAAKxG,MAEpB6G,EAAgBN,KACnBM,EAAgBN,GAAY3G,OAAOmF,OAAO,OAO5C,IAHA,IAAIkC,EAA8C,QAAhCD,EAAevC,EAAKyC,cAAqC,IAAjBF,EAA0BA,EAAe,GAC/FG,EAAaN,EAAgBN,GAExBd,EAAM,EAAGA,EAAMwB,EAAWrG,OAAQ6E,IAAO,CAChD,IAAI2B,EAAWH,EAAWxB,GACtB4B,EAAYD,EAASZ,KAAKxG,MAC1BsH,EAAeX,EAAgBJ,IAE/B,QAAWe,IAAiBA,EAAaC,SAASF,GACpDzD,EAAQc,YAAY,IAAIC,EAAA,EAAa,eAAgBkB,OAAOU,EAAU,KAAKV,OAAOwB,EAAW,qFAAuFD,EAASZ,OACpLW,EAAWE,GACpBzD,EAAQc,YAAY,IAAIC,EAAA,EAAa,eAAgBkB,OAAOU,EAAU,KAAKV,OAAOwB,EAAW,+BAAiC,CAACF,EAAWE,GAAYD,EAASZ,QAE/JW,EAAWE,GAAaD,EAASZ,IAErC,CAEA,OAAO,CACT,CACF,CCtCO,SAASgB,EAA+B5D,GAC7C,IAAIiB,EAASjB,EAAQK,YACjB0C,EAAkB9B,EAASA,EAAO+B,aAAehH,OAAOmF,OAAO,MAC/D0C,EAAkB7H,OAAOmF,OAAO,MACpC,MAAO,CACLuB,0BAA2BoB,EAC3BC,yBAA0BD,EAC1BvB,wBAAyBuB,EACzBE,uBAAwBF,EACxBxB,qBAAsBwB,EACtBG,oBAAqBH,GAGvB,SAASA,EAAqBjD,GAC5B,IAAIqD,EAEAvB,EAAW9B,EAAK+B,KAAKxG,MAEpByH,EAAgBlB,KACnBkB,EAAgBlB,GAAY3G,OAAOmF,OAAO,OAO5C,IAHA,IAAIgD,EAA8C,QAAhCD,EAAerD,EAAKuD,cAAqC,IAAjBF,EAA0BA,EAAe,GAC/FG,EAAaR,EAAgBlB,GAExBd,EAAM,EAAGA,EAAMsC,EAAWnH,OAAQ6E,IAAO,CAChD,IAAIyC,EAAWH,EAAWtC,GACtB0C,EAAYD,EAAS1B,KAAKxG,MAE1BoI,EAASzB,EAAgBJ,GAAW4B,GACtCvE,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOU,EAAU,KAAKV,OAAOsC,EAAW,qFAAuFD,EAAS1B,OAC/KyB,EAAWE,GACpBvE,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOU,EAAU,KAAKV,OAAOsC,EAAW,+BAAiC,CAACF,EAAWE,GAAYD,EAAS1B,QAE1JyB,EAAWE,GAAaD,EAAS1B,IAErC,CAEA,OAAO,CACT,CACF,CAEA,SAAS4B,EAASC,EAAMF,GACtB,UAAI,QAAaE,KAAS,QAAgBA,KAAS,QAAkBA,KAC7B,MAA/BA,EAAKC,YAAYH,EAI5B,CClDO,SAASI,EAAyB3E,GACvC,IAAI4E,EAAsB5I,OAAOmF,OAAO,MACpCF,EAASjB,EAAQK,YACrB,MAAO,CACLwE,oBAAqB,SAA6BhE,GAChD,IAAIiE,EAAgBjE,EAAK+B,KAAKxG,MAE9B,GAAe,OAAX6E,QAA8B,IAAXA,IAAqBA,EAAO8D,aAAaD,GAWhE,OANIF,EAAoBE,GACtB9E,EAAQc,YAAY,IAAIC,EAAA,EAAa,2CAA4CkB,OAAO6C,EAAe,MAAQ,CAACF,EAAoBE,GAAgBjE,EAAK+B,QAEzJgC,EAAoBE,GAAiBjE,EAAK+B,MAGrC,EAVL5C,EAAQc,YAAY,IAAIC,EAAA,EAAa,eAAgBkB,OAAO6C,EAAe,2DAA6DjE,EAAK+B,MAWjJ,EAEJ,C,oCCxBO,SAASoC,EAA2BnE,GACzC,OAAOA,EAAKoE,OAAS,0BAA6BpE,EAAKoE,OAAS,uBAClE,CAUO,SAASC,EAA2BrE,GACzC,OAAOA,EAAKoE,OAAS,uBAA0BE,EAAqBtE,IAASA,EAAKoE,OAAS,wBAC7F,CACO,SAASE,EAAqBtE,GACnC,OAAOA,EAAKoE,OAAS,4BAA+BpE,EAAKoE,OAAS,4BAA+BpE,EAAKoE,OAAS,+BAAkCpE,EAAKoE,OAAS,2BAA8BpE,EAAKoE,OAAS,0BAA6BpE,EAAKoE,OAAS,gCACxP,CACO,SAASG,EAA0BvE,GACxC,OAAOA,EAAKoE,OAAS,sBAAyBI,EAAoBxE,EACpE,CACO,SAASwE,EAAoBxE,GAClC,OAAOA,EAAKoE,OAAS,2BAA8BpE,EAAKoE,OAAS,2BAA8BpE,EAAKoE,OAAS,8BAAiCpE,EAAKoE,OAAS,0BAA6BpE,EAAKoE,OAAS,yBAA4BpE,EAAKoE,OAAS,+BACnP,C,0BCdO,SAASK,EAAmBtF,GAKjC,IAJA,IAAIiB,EAASjB,EAAQK,YACjBkF,EAAmBtE,EAASA,EAAO+B,aAAehH,OAAOmF,OAAO,MAChEqE,EAAexJ,OAAOmF,OAAO,MAExBU,EAAM,EAAG4D,EAAyBzF,EAAQ0F,cAAcC,YAAa9D,EAAM4D,EAAuBzI,OAAQ6E,IAAO,CACxH,IAAI+D,EAAMH,EAAuB5D,GAE7BsD,EAAqBS,KACvBJ,EAAaI,EAAIhD,KAAKxG,QAAS,EAEnC,CAEA,IAAIyJ,EAAY7J,OAAO8J,KAAKP,GAAkBtD,OAAOjG,OAAO8J,KAAKN,IACjE,MAAO,CACLO,UAAW,SAAmBlF,EAAMmF,EAAIC,EAAQC,EAAIC,GAClD,IA0Ba/J,EA1BTuG,EAAW9B,EAAK+B,KAAKxG,MAEzB,IAAKmJ,EAAiB5C,KAAc6C,EAAa7C,GAAW,CAC1D,IAAIyD,EAEAC,EAAkD,QAAhCD,EAAcD,EAAU,UAAgC,IAAhBC,EAAyBA,EAAcH,EACjGK,EAA0B,MAAlBD,IAoBDjK,EApBqCiK,GAqB9C7H,MAAM+H,QAAQnK,KAAW8I,EAA2B9I,IAAUgJ,EAA0BhJ,KAnB1F,GAAIkK,GAcZ,SAA4B3D,GAC1B,OAAgD,IAAzC6D,EAAkBC,QAAQ9D,EACnC,CAhBqB+D,CAAmB/D,GAC9B,OAGF,IAAIgE,GAAiB,EAAAC,EAAA,GAAejE,EAAU2D,EAAQE,EAAkBvE,OAAO4D,GAAaA,GAC5F7F,EAAQc,YAAY,IAAIC,EAAA,EAAa,iBAAkBkB,OAAOU,EAAU,OAAS,EAAAkE,EAAA,GAAWF,GAAiB9F,GAC/G,CACF,EAEJ,CACA,IAAI2F,EAAoB,GAAGvE,OAAO,KAAsB6E,EAAA,IAAoBC,KAAI,SAAUtC,GACxF,OAAOA,EAAK7B,IACd,I,ICjDIoE,E,4CCaG,SAASC,EAAoBjH,GAKlC,IAJA,IAAIkH,EAAelL,OAAOmF,OAAO,MAC7BF,EAASjB,EAAQK,YACjB8G,EAAoBlG,EAASA,EAAOmG,gBAAkB,KAEjDvF,EAAM,EAAGA,EAAMsF,EAAkBnK,OAAQ6E,IAAO,CACvD,IAAIwF,EAAYF,EAAkBtF,GAClCqF,EAAaG,EAAUzE,MAAQyE,EAAUC,SAC3C,CAIA,IAFA,IAAIC,EAAiBvH,EAAQ0F,cAAcC,YAElC6B,EAAM,EAAGA,EAAMD,EAAevK,OAAQwK,IAAO,CACpD,IAAI5B,EAAM2B,EAAeC,GAErB5B,EAAIX,OAAS,2BACfiC,EAAatB,EAAIhD,KAAKxG,OAASwJ,EAAI0B,UAAUP,KAAI,SAAUnE,GACzD,OAAOA,EAAKxG,KACd,IAEJ,CAEA,MAAO,CACLqL,UAAW,SAAmB5G,EAAM6G,EAAMC,EAASC,EAAOzB,GACxD,IAAIvD,EAAO/B,EAAK+B,KAAKxG,MACjBkL,EAAYJ,EAAatE,GAE7B,GAAK0E,EAAL,CAKA,IAAIO,EASV,SAAwC1B,GACtC,IAAI2B,EAAY3B,EAAUA,EAAUnJ,OAAS,GAG7C,QAFCwB,MAAM+H,QAAQuB,KAAc,EAAAC,EAAA,GAAU,GAE/BD,EAAU7C,MAChB,KAAK,yBACH,OA2DN,SAA0ClD,GACxC,OAAQA,GACN,IAAK,QACH,OAAO,UAET,IAAK,WACH,OAAO,aAET,IAAK,eACH,OAAO,kBAIF,EAAAgG,EAAA,GAAU,EAAG,0BAA2B,EAAAC,EAAA,GAAQjG,GAC3D,CAzEakG,CAAiCH,EAAU/F,WAEpD,KAAK,UACH,OAAO,UAET,KAAK,oBACH,OAAO,oBAET,KAAK,oBACH,OAAO,oBAET,KAAK,wBACH,OAAO,wBAET,KAAK,wBACH,OAAO,wBAET,KAAK,sBACL,KAAK,qBACH,OAAO,WAET,KAAK,2BACL,KAAK,0BACH,OAAO,WAET,KAAK,2BACL,KAAK,0BACH,OAAO,WAET,KAAK,qBACH,OAAO,qBAET,KAAK,8BACL,KAAK,6BACH,OAAO,cAET,KAAK,0BACL,KAAK,yBACH,OAAO,UAET,KAAK,yBACL,KAAK,wBACH,OAAO,SAET,KAAK,0BACH,OAAO,eAET,KAAK,iCACL,KAAK,gCACH,OAAO,iBAET,KAAK,2BAGD,OADiBoE,EAAUA,EAAUnJ,OAAS,GAC5BiI,OAAS,iCAAoC,2BAA2C,wBAGlH,CAxE8BiD,CAA+B/B,GAEnD0B,IAA+D,IAA1CP,EAAUb,QAAQoB,IACzC7H,EAAQc,YAAY,IAAIC,EAAA,EAAa,eAAgBkB,OAAOW,EAAM,yBAA0BX,OAAO4F,EAAmB,KAAMhH,GAL9H,MAFEb,EAAQc,YAAY,IAAIC,EAAA,EAAa,uBAAwBkB,OAAOW,EAAM,MAAQ/B,GAStF,EAEJ,CCzCO,SAASsH,EAAgCnI,GAK9C,IAJA,IAAIoI,EAAqBpM,OAAOmF,OAAO,MACnCF,EAASjB,EAAQK,YACjB8G,EAAoBlG,EAASA,EAAOmG,gBAAkB,KAEjDvF,EAAM,EAAGA,EAAMsF,EAAkBnK,OAAQ6E,IAAO,CACvD,IAAIwF,EAAYF,EAAkBtF,GAClCuG,EAAmBf,EAAUzE,OAASyE,EAAUgB,YAClD,CAIA,IAFA,IAAId,EAAiBvH,EAAQ0F,cAAcC,YAElC6B,EAAM,EAAGA,EAAMD,EAAevK,OAAQwK,IAAO,CACpD,IAAI5B,EAAM2B,EAAeC,GAErB5B,EAAIX,OAAS,2BACfmD,EAAmBxC,EAAIhD,KAAKxG,QAAUwJ,EAAI0C,WAE9C,CAEA,IAAIC,EAAmBvM,OAAOmF,OAAO,MACjCqH,EAAoBxM,OAAOmF,OAAO,MACtC,MAAO,CAILsH,MAAO,SAAe5H,GACpB,GAAuB,MAAnBA,EAAK6H,WAAT,CAIA,IAAIC,EAEJ,GAAI9H,EAAKoE,OAAS,uBAA0BpE,EAAKoE,OAAS,qBACxD0D,EAAiBJ,OACZ,GAAIpD,EAAqBtE,IAASwE,EAAoBxE,GAAO,CAClE,IAAI8B,EAAW9B,EAAK+B,KAAKxG,WAGFwM,KAFvBD,EAAiBH,EAAkB7F,MAGjC6F,EAAkB7F,GAAYgG,EAAiB3M,OAAOmF,OAAO,MAEjE,MACEwH,EAAiB3M,OAAOmF,OAAO,MAGjC,IAAK,IAAI0H,EAAM,EAAGC,EAAoBjI,EAAK6H,WAAYG,EAAMC,EAAkB9L,OAAQ6L,IAAO,CAC5F,IAAIE,EAAaD,EAAkBD,GAC/B/D,EAAgBiE,EAAWnG,KAAKxG,MAEhCgM,EAAmBtD,KACjB6D,EAAe7D,GACjB9E,EAAQc,YAAY,IAAIC,EAAA,EAAa,mBAAoBkB,OAAO6C,EAAe,6CAA+C,CAAC6D,EAAe7D,GAAgBiE,KAE9JJ,EAAe7D,GAAiBiE,EAGtC,CA5BA,CA6BF,EAEJ,CFrEA,SAASC,EAAgBC,EAAKC,EAAK9M,GAAiK,OAApJ8M,KAAOD,EAAOjN,OAAOC,eAAegN,EAAKC,EAAK,CAAE9M,MAAOA,EAAO+M,YAAY,EAAM9M,cAAc,EAAM+M,UAAU,IAAkBH,EAAIC,GAAO9M,EAAgB6M,CAAK,CAgBzM,SAASI,EAA2BrJ,GAIzC,IAHA,IAAIiB,EAASjB,EAAQK,YACjBmF,EAAexJ,OAAOmF,OAAO,MAExBU,EAAM,EAAG4D,EAAyBzF,EAAQ0F,cAAcC,YAAa9D,EAAM4D,EAAuBzI,OAAQ6E,IAAO,CACxH,IAAI+D,EAAMH,EAAuB5D,GAE7BsD,EAAqBS,KACvBJ,EAAaI,EAAIhD,KAAKxG,OAASwJ,EAEnC,CAEA,MAAO,CACL0D,oBAAqBC,EACrBtF,oBAAqBsF,EACrBvF,uBAAwBuF,EACxBC,mBAAoBD,EACpBpG,kBAAmBoG,EACnBxF,yBAA0BwF,GAG5B,SAASA,EAAe1I,GACtB,IAGI4I,EAHA9G,EAAW9B,EAAK+B,KAAKxG,MACrBsN,EAAUlE,EAAa7C,GACvBe,EAA0B,OAAXzC,QAA8B,IAAXA,OAAoB,EAASA,EAAO4B,QAAQF,GASlF,GANI+G,EACFD,EAAeE,EAAiBD,EAAQzE,MAC/BvB,IACT+F,EAsBN,SAAuBhF,GACrB,IAAI,QAAaA,GACf,OAAO,0BAGT,IAAI,QAAaA,GACf,OAAO,0BAGT,IAAI,QAAgBA,GAClB,OAAO,6BAGT,IAAI,QAAYA,GACd,OAAO,yBAGT,IAAI,QAAWA,GACb,OAAO,wBAIT,IAAI,QAAkBA,GACpB,OAAO,iCAIA,EAAAsD,EAAA,GAAU,EAAG,qBAAsB,EAAAC,EAAA,GAAQvD,GACtD,CAlDqBmF,CAAclG,IAG3B+F,GACF,GAAIA,IAAiB5I,EAAKoE,KAAM,CAC9B,IAAI4E,EA+CZ,SAAiC5E,GAC/B,OAAQA,GACN,KAAK,0BACH,MAAO,SAET,KAAK,0BACH,MAAO,SAET,KAAK,6BACH,MAAO,YAET,KAAK,yBACH,MAAO,QAET,KAAK,wBACH,MAAO,OAET,KAAK,gCACH,MAAO,gBAIF,EAAA8C,EAAA,GAAU,EAAG,qBAAsB,EAAAC,EAAA,GAAQ/C,GACtD,CAtEsB6E,CAAwBjJ,EAAKoE,MAC3CjF,EAAQc,YAAY,IAAIC,EAAA,EAAa,qBAAqBkB,OAAO4H,EAAS,WAAY5H,OAAOU,EAAU,MAAQ+G,EAAU,CAACA,EAAS7I,GAAQA,GAC7I,MACK,CACL,IAAIkJ,EAAe/N,OAAO8J,KAAKN,GAE3BvE,IACF8I,EAAeA,EAAa9H,OAAOjG,OAAO8J,KAAK7E,EAAO+B,gBAGxD,IAAI2D,GAAiB,EAAAC,EAAA,GAAejE,EAAUoH,GAC9C/J,EAAQc,YAAY,IAAIC,EAAA,EAAa,uBAAwBkB,OAAOU,EAAU,iCAAmC,EAAAkE,EAAA,GAAWF,GAAiB9F,EAAK+B,MACpJ,CACF,CACF,CACA,IAAI+G,GAA4CX,EAAxBhC,EAAoB,CAAC,EAAsC,2BAA6B,2BAA6BgC,EAAgBhC,EAAmB,2BAA6B,2BAA6BgC,EAAgBhC,EAAmB,8BAAgC,8BAAgCgC,EAAgBhC,EAAmB,0BAA4B,0BAA4BgC,EAAgBhC,EAAmB,yBAA2B,yBAA2BgC,EAAgBhC,EAAmB,iCAAmC,iCAAmCA,GG5DnmB,SAASgD,EAAwBhK,GACtC,IAAIiK,EAAgBjO,OAAOmF,OAAO,MAClC,MAAO,CACL+I,MAAO,WACLD,EAAgBjO,OAAOmF,OAAO,KAChC,EACAsG,UAAW,WACTwC,EAAgBjO,OAAOmF,OAAO,KAChC,EACAgJ,SAAU,SAAkBtJ,GAC1B,IAAIuJ,EAAUvJ,EAAK+B,KAAKxG,MAQxB,OANI6N,EAAcG,GAChBpK,EAAQc,YAAY,IAAIC,EAAA,EAAa,yCAA0CkB,OAAOmI,EAAS,MAAQ,CAACH,EAAcG,GAAUvJ,EAAK+B,QAErIqH,EAAcG,GAAWvJ,EAAK+B,MAGzB,CACT,EAEJ,CCrBO,SAASyH,EAA0BrK,GACxC,IAAIsK,EAAiB,GACjBC,EAAavO,OAAOmF,OAAO,MAC/B,MAAO,CACLqJ,YAAa,CACX/B,MAAO,WACL6B,EAAeG,KAAKF,GACpBA,EAAavO,OAAOmF,OAAO,KAC7B,EACAuJ,MAAO,WACLH,EAAaD,EAAeK,KAC9B,GAEFC,YAAa,SAAqB/J,GAChC,IAAI0D,EAAY1D,EAAK+B,KAAKxG,MAEtBmO,EAAWhG,GACbvE,EAAQc,YAAY,IAAIC,EAAA,EAAa,4CAA6CkB,OAAOsC,EAAW,MAAQ,CAACgG,EAAWhG,GAAY1D,EAAK+B,QAEzI2H,EAAWhG,GAAa1D,EAAK+B,IAEjC,EAEJ,CCrBO,SAASiI,EAA0B7K,GACxC,MAAO,CACL8K,SAAU,SAAkBjK,GAC1B,IAAK,IAAIgB,EAAM,EAAGkJ,EAAqBlK,EAAK8E,YAAa9D,EAAMkJ,EAAmB/N,OAAQ6E,IAAO,CAC/F,IAAImJ,EAAaD,EAAmBlJ,GAEpC,IAAKmD,EAA2BgG,GAAa,CAC3C,IAAIC,EAAUD,EAAW/F,OAAS,uBAA0B+F,EAAW/F,OAAS,qBAAwB,SAAW,IAAM+F,EAAWpI,KAAKxG,MAAQ,IACjJ4D,EAAQc,YAAY,IAAIC,EAAA,EAAa,OAAOkB,OAAOgJ,EAAS,kCAAmCD,GACjG,CACF,CAEA,OAAO,CACT,EAEJ,C,kDCjBO,SAASE,EAAuBlL,GACrC,MAAO,CACLmL,eAAgB,SAAwBtK,GACtC,IAAIuK,EAAevK,EAAK+B,KAAKxG,MACd4D,EAAQqL,YAAYD,IAGjCpL,EAAQc,YAAY,IAAIC,EAAA,EAAa,qBAAsBkB,OAAOmJ,EAAc,MAAQvK,EAAK+B,MAEjG,EAEJ,CCXO,SAAS0I,EAAsBtL,GACpC,IAAIuL,EAAgB,GAChBC,EAAe,GACnB,MAAO,CACLC,oBAAqB,SAA6B5K,GAEhD,OADA0K,EAAcd,KAAK5J,IACZ,CACT,EACA6K,mBAAoB,SAA4B7K,GAE9C,OADA2K,EAAaf,KAAK5J,IACX,CACT,EACAiK,SAAU,CACRJ,MAAO,WAGL,IAFA,IAAIiB,EAAmB3P,OAAOmF,OAAO,MAE5BU,EAAM,EAAGA,EAAM0J,EAAcvO,OAAQ6E,IAG5C,IAFA,IAAIE,EAAYwJ,EAAc1J,GAErB2F,EAAM,EAAGoE,EAAyB5L,EAAQ6L,kCAAkC9J,GAAYyF,EAAMoE,EAAuB5O,OAAQwK,IAAO,CAE3ImE,EADeC,EAAuBpE,GACZ5E,KAAKxG,QAAS,CAC1C,CAGF,IAAK,IAAIyM,EAAM,EAAGA,EAAM2C,EAAaxO,OAAQ6L,IAAO,CAClD,IAAIiD,EAAcN,EAAa3C,GAC3BkD,EAAWD,EAAYlJ,KAAKxG,OAEG,IAA/BuP,EAAiBI,IACnB/L,EAAQc,YAAY,IAAIC,EAAA,EAAa,aAAckB,OAAO8J,EAAU,oBAAsBD,GAE9F,CACF,GAGN,C,eC5CA,SAASE,EAAQC,EAAQC,GAAkB,IAAIpG,EAAO9J,OAAO8J,KAAKmG,GAAS,GAAIjQ,OAAOmQ,sBAAuB,CAAE,IAAIC,EAAUpQ,OAAOmQ,sBAAsBF,GAAaC,IAAgBE,EAAUA,EAAQC,QAAO,SAAUC,GAAO,OAAOtQ,OAAOuQ,yBAAyBN,EAAQK,GAAKnD,UAAY,KAAIrD,EAAK2E,KAAK+B,MAAM1G,EAAMsG,EAAU,CAAE,OAAOtG,CAAM,CAEpV,SAAS2G,EAActQ,GAAU,IAAK,IAAIuQ,EAAI,EAAGA,EAAIC,UAAU3P,OAAQ0P,IAAK,CAAE,IAAIE,EAAyB,MAAhBD,UAAUD,GAAaC,UAAUD,GAAK,CAAC,EAAOA,EAAI,EAAKV,EAAQhQ,OAAO4Q,IAAS,GAAMC,SAAQ,SAAU3D,GAAO,EAAgB/M,EAAQ+M,EAAK0D,EAAO1D,GAAO,IAAelN,OAAO8Q,0BAA6B9Q,OAAO+Q,iBAAiB5Q,EAAQH,OAAO8Q,0BAA0BF,IAAmBZ,EAAQhQ,OAAO4Q,IAASC,SAAQ,SAAU3D,GAAOlN,OAAOC,eAAeE,EAAQ+M,EAAKlN,OAAOuQ,yBAAyBK,EAAQ1D,GAAO,GAAM,CAAE,OAAO/M,CAAQ,CAErhB,SAAS,EAAgB8M,EAAKC,EAAK9M,GAAiK,OAApJ8M,KAAOD,EAAOjN,OAAOC,eAAegN,EAAKC,EAAK,CAAE9M,MAAOA,EAAO+M,YAAY,EAAM9M,cAAc,EAAM+M,UAAU,IAAkBH,EAAIC,GAAO9M,EAAgB6M,CAAK,CAoCzM,SAAS+D,EAAmChN,GAKjD,IAJA,IAAIiN,EAAgBjR,OAAOmF,OAAO,MAC9BF,EAASjB,EAAQK,YACjB8G,EAAoBlG,EAASA,EAAOmG,gBAAkB,KAEjDvF,EAAM,EAAGA,EAAMsF,EAAkBnK,OAAQ6E,IAAO,CACvD,IAAIwF,EAAYF,EAAkBtF,GAClCoL,EAAc5F,EAAUzE,MAAQyE,EAAU6F,KAAKnG,KAAI,SAAUoG,GAC3D,OAAOA,EAAIvK,IACb,GACF,CAIA,IAFA,IAAI2E,EAAiBvH,EAAQ0F,cAAcC,YAElC6B,EAAM,EAAGA,EAAMD,EAAevK,OAAQwK,IAAO,CACpD,IAAI5B,EAAM2B,EAAeC,GAEzB,GAAI5B,EAAIX,OAAS,yBAA2B,CAC1C,IAAImI,EAGAC,EAAiD,QAApCD,EAAiBxH,EAAI+G,iBAA0C,IAAnBS,EAA4BA,EAAiB,GAC1GH,EAAcrH,EAAIhD,KAAKxG,OAASiR,EAAUtG,KAAI,SAAUoG,GACtD,OAAOA,EAAIvK,KAAKxG,KAClB,GACF,CACF,CAEA,MAAO,CACLqL,UAAW,SAAmB6F,GAC5B,IAAIxI,EAAgBwI,EAAc1K,KAAKxG,MACnCmR,EAAYN,EAAcnI,GAE9B,GAAIwI,EAAcX,WAAaY,EAC7B,IAAK,IAAI1E,EAAM,EAAG2E,EAAyBF,EAAcX,UAAW9D,EAAM2E,EAAuBxQ,OAAQ6L,IAAO,CAC9G,IAAI4E,EAAUD,EAAuB3E,GACjCuB,EAAUqD,EAAQ7K,KAAKxG,MAE3B,IAAoC,IAAhCmR,EAAU9G,QAAQ2D,GAAiB,CACrC,IAAIsD,GAAc,EAAA9G,EAAA,GAAewD,EAASmD,GAC1CvN,EAAQc,YAAY,IAAIC,EAAA,EAAa,qBAAsBkB,OAAOmI,EAAS,qBAAuBnI,OAAO6C,EAAe,OAAS,EAAA+B,EAAA,GAAW6G,GAAcD,GAC5J,CACF,CAGF,OAAO,CACT,EAEJ,C,0BCAA,SAASE,EAAiB3N,EAASa,GAEjC,IAAI+M,EAAe5N,EAAQ6N,eAE3B,GAAKD,EAAL,CAIA,IAAInJ,GAAO,QAAamJ,GAExB,IAAK,QAAWnJ,GAQhB,IAKE,QAAoBmE,IAJFnE,EAAKqJ,aAAajN,OAAM+H,GAIX,CAC7B,IAAImF,GAAW,EAAA/F,EAAA,GAAQ4F,GAEvB5N,EAAQc,YAAY,IAAIC,EAAA,EAAa,2BAA4BkB,OAAO8L,EAAU,aAAc9L,QAAO,OAAMpB,GAAO,KAAMA,GAC5H,CASF,CARE,MAAOmN,GACP,IAAIC,GAAY,EAAAjG,EAAA,GAAQ4F,GAEpBI,aAAiBjN,EAAA,EACnBf,EAAQc,YAAYkN,GAEpBhO,EAAQc,YAAY,IAAIC,EAAA,EAAa,2BAA4BkB,OAAOgM,EAAW,aAAchM,QAAO,OAAMpB,GAAO,MAAQmN,EAAME,QAASrN,OAAM+H,OAAWA,OAAWA,EAAWoF,GAEvL,KA1BA,CACE,IAAIG,GAAU,EAAAnG,EAAA,GAAQ4F,GACtB5N,EAAQc,YAAY,IAAIC,EAAA,EAAa,2BAA4BkB,OAAOkM,EAAS,aAAclM,QAAO,OAAMpB,GAAO,KAAMA,GAE3H,CARA,CA+BF,CC7HA,SAAS,EAAQoL,EAAQC,GAAkB,IAAIpG,EAAO9J,OAAO8J,KAAKmG,GAAS,GAAIjQ,OAAOmQ,sBAAuB,CAAE,IAAIC,EAAUpQ,OAAOmQ,sBAAsBF,GAAaC,IAAgBE,EAAUA,EAAQC,QAAO,SAAUC,GAAO,OAAOtQ,OAAOuQ,yBAAyBN,EAAQK,GAAKnD,UAAY,KAAIrD,EAAK2E,KAAK+B,MAAM1G,EAAMsG,EAAU,CAAE,OAAOtG,CAAM,CAEpV,SAAS,EAAc3J,GAAU,IAAK,IAAIuQ,EAAI,EAAGA,EAAIC,UAAU3P,OAAQ0P,IAAK,CAAE,IAAIE,EAAyB,MAAhBD,UAAUD,GAAaC,UAAUD,GAAK,CAAC,EAAOA,EAAI,EAAK,EAAQ1Q,OAAO4Q,IAAS,GAAMC,SAAQ,SAAU3D,GAAO,GAAgB/M,EAAQ+M,EAAK0D,EAAO1D,GAAO,IAAelN,OAAO8Q,0BAA6B9Q,OAAO+Q,iBAAiB5Q,EAAQH,OAAO8Q,0BAA0BF,IAAmB,EAAQ5Q,OAAO4Q,IAASC,SAAQ,SAAU3D,GAAOlN,OAAOC,eAAeE,EAAQ+M,EAAKlN,OAAOuQ,yBAAyBK,EAAQ1D,GAAO,GAAM,CAAE,OAAO/M,CAAQ,CAErhB,SAAS,GAAgB8M,EAAKC,EAAK9M,GAAiK,OAApJ8M,KAAOD,EAAOjN,OAAOC,eAAegN,EAAKC,EAAK,CAAE9M,MAAOA,EAAO+M,YAAY,EAAM9M,cAAc,EAAM+M,UAAU,IAAkBH,EAAIC,GAAO9M,EAAgB6M,CAAK,CAoDzM,SAASmF,GAA0CpO,GAKxD,IAJA,IAAIqO,EAAkBrS,OAAOmF,OAAO,MAChCF,EAASjB,EAAQK,YACjB8G,EAAoBlG,EAASA,EAAOmG,gBAAkB,KAEjDI,EAAM,EAAGA,EAAML,EAAkBnK,OAAQwK,IAAO,CACvD,IAAIH,EAAYF,EAAkBK,GAClC6G,EAAgBhH,EAAUzE,OAAQ,EAAA0L,EAAA,GAAOjH,EAAU6F,KAAKb,OAAO,OAAqB,SAAUc,GAC5F,OAAOA,EAAIvK,IACb,GACF,CAIA,IAFA,IAAI2E,EAAiBvH,EAAQ0F,cAAcC,YAElCkD,EAAM,EAAGA,EAAMtB,EAAevK,OAAQ6L,IAAO,CACpD,IAAIjD,EAAM2B,EAAesB,GAEzB,GAAIjD,EAAIX,OAAS,yBAA2B,CAC1C,IAAImI,EAGAmB,EAAgD,QAApCnB,EAAiBxH,EAAI+G,iBAA0C,IAAnBS,EAA4BA,EAAiB,GACzGiB,EAAgBzI,EAAIhD,KAAKxG,QAAS,EAAAkS,EAAA,GAAOC,EAASlC,OAAOmC,KAAyB,SAAUrB,GAC1F,OAAOA,EAAIvK,KAAKxG,KAClB,GACF,CACF,CAEA,MAAO,CACLqL,UAAW,CAETiD,MAAO,SAAe4C,GACpB,IAAIxI,EAAgBwI,EAAc1K,KAAKxG,MACnCqS,EAAeJ,EAAgBvJ,GAEnC,GAAI2J,EAUF,IATA,IAAIC,EAGAC,EAAkE,QAArDD,EAAwBpB,EAAcX,iBAAiD,IAA1B+B,EAAmCA,EAAwB,GAErIE,GAAa,EAAAN,EAAA,GAAOK,GAAW,SAAUxB,GAC3C,OAAOA,EAAIvK,KAAKxG,KAClB,IAESyS,EAAM,EAAGC,EAAgB9S,OAAO8J,KAAK2I,GAAeI,EAAMC,EAAc9R,OAAQ6R,IAAO,CAC9F,IAAIzE,EAAU0E,EAAcD,GAE5B,IAAKD,EAAWxE,GAAU,CACxB,IAAI2E,EAAUN,EAAarE,GAAS3F,KAChCuK,GAAa,QAAOD,IAAW,EAAA/G,EAAA,GAAQ+G,IAAW,OAAMA,GAC5D/O,EAAQc,YAAY,IAAIC,EAAA,EAAa,eAAgBkB,OAAO6C,EAAe,gBAAkB7C,OAAOmI,EAAS,eAAiBnI,OAAO+M,EAAY,2CAA6C1B,GAChM,CACF,CAEJ,GAGN,CAEA,SAASkB,GAAuBrB,GAC9B,OAAOA,EAAI1I,KAAKQ,OAAS,mBAA0C,MAApBkI,EAAI8B,YACrD,CC7DA,SAASC,GAAqBjO,EAAQkO,EAASC,EAAiBxB,EAAcyB,GAC5E,IAAI,QAAczB,MAAkB,QAAcuB,GAAU,CAI1D,KAHwD,MAAnBC,GAA2BA,EAAgBnK,OAAS,kBAClC2D,IAAzByG,GAG5B,OAAO,EAGT,IAAIC,EAAuB1B,EAAa2B,OACxC,OAAO,QAAgBtO,EAAQkO,EAASG,EAC1C,CAEA,OAAO,QAAgBrO,EAAQkO,EAASvB,EAC1C,C,4BC9DA,SAAS4B,GAAcC,GACrB,OAAIjR,MAAM+H,QAAQkJ,GACTA,EAAO1I,KAAI,SAAU9G,GAC1B,IAAIyP,EAAezP,EAAK,GACpB0P,EAAY1P,EAAK,GACrB,MAAO,cAAegC,OAAOyN,EAAc,uBAA0BF,GAAcG,EACrF,IAAGC,KAAK,SAGHH,CACT,CA6HA,SAASI,GAAyC7P,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBC,EAAU9E,GACzJ,IAAI+E,EAAWnQ,EAAQqL,YAAYD,GAEnC,GAAK+E,EAAL,CAIA,IAAIC,EAAwBC,GAAoCrQ,EAAS+P,EAA8BI,GACnGG,EAAYF,EAAsB,GAClCG,EAAiBH,EAAsB,GAG3C,GAAIF,IAAaI,EAAjB,CAMAE,GAAwBxQ,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBC,EAAUI,GAGjI,IAAK,IAAI5D,EAAI,EAAGA,EAAI6D,EAAevT,OAAQ0P,IACzCmD,GAAyC7P,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBC,EAAUK,EAAe7D,GARnK,CATA,CAmBF,CAIA,SAAS+D,GAAiCzQ,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBS,EAAeC,GAEtJ,GAAID,IAAkBC,IAKlBX,EAAsBY,IAAIF,EAAeC,EAAeV,GAA5D,CAIAD,EAAsBa,IAAIH,EAAeC,EAAeV,GACxD,IAAIa,EAAY9Q,EAAQqL,YAAYqF,GAChCK,EAAY/Q,EAAQqL,YAAYsF,GAEpC,GAAKG,GAAcC,EAAnB,CAIA,IAAIC,EAAyBX,GAAoCrQ,EAAS+P,EAA8Be,GACpGG,EAAYD,EAAuB,GACnCE,EAAiBF,EAAuB,GAExCG,EAAyBd,GAAoCrQ,EAAS+P,EAA8BgB,GACpGT,EAAYa,EAAuB,GACnCZ,EAAiBY,EAAuB,GAI5CX,GAAwBxQ,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBgB,EAAWX,GAGlI,IAAK,IAAIc,EAAI,EAAGA,EAAIb,EAAevT,OAAQoU,IACzCX,GAAiCzQ,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBS,EAAeH,EAAea,IAKhK,IAAK,IAAI1E,EAAI,EAAGA,EAAIwE,EAAelU,OAAQ0P,IACzC+D,GAAiCzQ,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBiB,EAAexE,GAAIiE,EAtBrJ,CARA,CAgCF,CAgFA,SAASH,GAAwBxQ,EAAS8P,EAAWC,EAA8BC,EAAuBqB,EAAkCJ,EAAWX,GAMrJ,IAAK,IAAIgB,EAAM,EAAGxC,EAAgB9S,OAAO8J,KAAKmL,GAAYK,EAAMxC,EAAc9R,OAAQsU,IAAO,CAC3F,IAAI5B,EAAeZ,EAAcwC,GAC7BC,EAAUjB,EAAUZ,GAExB,GAAI6B,EAGF,IAFA,IAAIC,EAAUP,EAAUvB,GAEfhD,EAAI,EAAGA,EAAI8E,EAAQxU,OAAQ0P,IAClC,IAAK,IAAI0E,EAAI,EAAGA,EAAIG,EAAQvU,OAAQoU,IAAK,CACvC,IAAIK,EAAWC,GAAa1R,EAAS+P,EAA8BC,EAAuBqB,EAAkC3B,EAAc8B,EAAQ9E,GAAI6E,EAAQH,IAE1JK,GACF3B,EAAUrF,KAAKgH,EAEnB,CAGN,CACF,CAIA,SAASC,GAAa1R,EAAS+P,EAA8BC,EAAuBqB,EAAkC3B,EAAciC,EAAQC,GAC1I,IAAIC,EAAcF,EAAO,GACrBG,EAAQH,EAAO,GACfI,EAAOJ,EAAO,GACdK,EAAcJ,EAAO,GACrBK,EAAQL,EAAO,GACfM,EAAON,EAAO,GASd3B,EAAuBoB,GAAoCQ,IAAgBG,IAAe,QAAaH,KAAgB,QAAaG,GAExI,IAAK/B,EAAsB,CACzB,IAAIkC,EAAkBC,EAGlBC,EAAQP,EAAMlP,KAAKxG,MACnBkW,EAAQL,EAAMrP,KAAKxG,MAEvB,GAAIiW,IAAUC,EACZ,MAAO,CAAC,CAAC5C,EAAc,IAAKzN,OAAOoQ,EAAO,WAAapQ,OAAOqQ,EAAO,2BAA6B,CAACR,GAAQ,CAACG,IAQ9G,IAyBJ,SAAuBM,EAAYC,GACjC,GAAID,EAAWvV,SAAWwV,EAAWxV,OACnC,OAAO,EAGT,OAAOuV,EAAWE,OAAM,SAAUC,GAChC,IAYeC,EAAQC,EAZnBC,GAAY,EAAAC,GAAA,GAAKN,GAAY,SAAUO,GACzC,OAAOA,EAASnQ,KAAKxG,QAAUsW,EAAU9P,KAAKxG,KAChD,IAEA,QAAKyW,IAQUF,EAJED,EAAUtW,MAIJwW,EAJWC,EAAUzW,OAKvC,OAAMuW,MAAY,OAAMC,GAJ/B,GACF,CAzCSI,CAJgD,QAAxCb,EAAmBL,EAAMnF,iBAA4C,IAArBwF,EAA8BA,EAAmB,GAEzD,QAAxCC,EAAmBH,EAAMtF,iBAA4C,IAArByF,EAA8BA,EAAmB,IAG5G,MAAO,CAAC,CAAC1C,EAAc,iCAAkC,CAACoC,GAAQ,CAACG,GAEvE,CAGA,IAAIgB,EAAiB,OAATlB,QAA0B,IAATA,OAAkB,EAASA,EAAKtN,KACzDyO,EAAiB,OAAThB,QAA0B,IAATA,OAAkB,EAASA,EAAKzN,KAE7D,GAAIwO,GAASC,GAASC,GAAgBF,EAAOC,GAC3C,MAAO,CAAC,CAACxD,EAAc,kCAAmCzN,QAAO,EAAA+F,EAAA,GAAQiL,GAAQ,WAAahR,QAAO,EAAA+F,EAAA,GAAQkL,GAAQ,MAAQ,CAACpB,GAAQ,CAACG,IAMzI,IAAImB,EAAgBtB,EAAMuB,aACtBC,EAAgBrB,EAAMoB,aAE1B,GAAID,GAAiBE,EAAe,CAClC,IAAIxD,EA5JR,SAA8C9P,EAAS+P,EAA8BC,EAAuBC,EAAsB4B,EAAauB,EAAepB,EAAasB,GACzK,IAAIxD,EAAY,GAEZyD,EAAyBC,GAA0BxT,EAAS+P,EAA8B8B,EAAauB,GACvGnC,EAAYsC,EAAuB,GACnCrC,EAAiBqC,EAAuB,GAExCE,EAAyBD,GAA0BxT,EAAS+P,EAA8BiC,EAAasB,GACvGhD,EAAYmD,EAAuB,GACnClD,EAAiBkD,EAAuB,GAM5C,GAHAjD,GAAwBxQ,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBgB,EAAWX,GAGpG,IAA1BC,EAAevT,OACjB,IAAK,IAAIoU,EAAI,EAAGA,EAAIb,EAAevT,OAAQoU,IACzCvB,GAAyC7P,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBgB,EAAWV,EAAea,IAMtK,GAA8B,IAA1BF,EAAelU,OACjB,IAAK,IAAI0P,EAAI,EAAGA,EAAIwE,EAAelU,OAAQ0P,IACzCmD,GAAyC7P,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBK,EAAWY,EAAexE,IAOtK,IAAK,IAAIgH,EAAM,EAAGA,EAAMxC,EAAelU,OAAQ0W,IAC7C,IAAK,IAAIC,EAAK,EAAGA,EAAKpD,EAAevT,OAAQ2W,IAC3ClD,GAAiCzQ,EAAS8P,EAAWC,EAA8BC,EAAuBC,EAAsBiB,EAAewC,GAAMnD,EAAeoD,IAIxK,OAAO7D,CACT,CAqHoB8D,CAAqC5T,EAAS+P,EAA8BC,EAAuBC,GAAsB,QAAagD,GAAQG,GAAe,QAAaF,GAAQI,GAClM,OAiIJ,SAA2BxD,EAAWJ,EAAcoC,EAAOG,GACzD,GAAInC,EAAU9S,OAAS,EACrB,MAAO,CAAC,CAAC0S,EAAcI,EAAU/I,KAAI,SAAU8M,GAE7C,OADaA,EAAM,EAErB,KAAK/D,EAAUgE,QAAO,SAAUC,EAAWC,GACzC,IAAIxC,EAAUwC,EAAM,GACpB,OAAOD,EAAU9R,OAAOuP,EAC1B,GAAG,CAACM,IAAShC,EAAUgE,QAAO,SAAUC,EAAWE,GACjD,IAAI1C,EAAU0C,EAAM,GACpB,OAAOF,EAAU9R,OAAOsP,EAC1B,GAAG,CAACU,IAER,CA9IWiC,CAAkBpE,EAAWJ,EAAcoC,EAAOG,EAC3D,CACF,CA2BA,SAASkB,GAAgBF,EAAOC,GAC9B,OAAI,QAAWD,KACN,QAAWC,IAASC,GAAgBF,EAAM1D,OAAQ2D,EAAM3D,WAG7D,QAAW2D,MAIX,QAAcD,KACT,QAAcC,IAASC,GAAgBF,EAAM1D,OAAQ2D,EAAM3D,WAGhE,QAAc2D,QAId,QAAWD,MAAU,QAAWC,KAC3BD,IAAUC,EAIrB,CAKA,SAASM,GAA0BxT,EAAS+P,EAA8BoE,EAAYd,GACpF,IAAIe,EAASrE,EAA6BsE,IAAIhB,GAE9C,IAAKe,EAAQ,CACX,IAAIE,EAActY,OAAOmF,OAAO,MAC5BoT,EAAgBvY,OAAOmF,OAAO,MAElCqT,GAA+BxU,EAASmU,EAAYd,EAAciB,EAAaC,GAE/EH,EAAS,CAACE,EAAatY,OAAO8J,KAAKyO,IACnCxE,EAA6B0E,IAAIpB,EAAce,EACjD,CAEA,OAAOA,CACT,CAIA,SAAS/D,GAAoCrQ,EAAS+P,EAA8BI,GAElF,IAAIiE,EAASrE,EAA6BsE,IAAIlE,EAASkD,cAEvD,GAAIe,EACF,OAAOA,EAGT,IAAIM,GAAe,EAAAC,EAAA,GAAY3U,EAAQK,YAAa8P,EAASyE,eAC7D,OAAOpB,GAA0BxT,EAAS+P,EAA8B2E,EAAcvE,EAASkD,aACjG,CAEA,SAASmB,GAA+BxU,EAASmU,EAAYd,EAAciB,EAAaC,GACtF,IAAK,IAAIM,EAAM,EAAGC,EAAyBzB,EAAa0B,WAAYF,EAAMC,EAAuB9X,OAAQ6X,IAAO,CAC9G,IAAIG,EAAYF,EAAuBD,GAEvC,OAAQG,EAAU/P,MAChB,KAAK,UAED,IAAIV,EAAYyQ,EAAUpS,KAAKxG,MAC3BkI,OAAW,IAEX,QAAa6P,KAAe,QAAgBA,MAC9C7P,EAAW6P,EAAWzP,YAAYH,IAGpC,IAAImL,EAAesF,EAAUC,MAAQD,EAAUC,MAAM7Y,MAAQmI,EAExD+P,EAAY5E,KACf4E,EAAY5E,GAAgB,IAG9B4E,EAAY5E,GAAcjF,KAAK,CAAC0J,EAAYa,EAAW1Q,IACvD,MAGJ,KAAK,oBACHiQ,EAAcS,EAAUpS,KAAKxG,QAAS,EACtC,MAEF,KAAK,oBAED,IAAIwY,EAAgBI,EAAUJ,cAC1BM,EAAqBN,GAAgB,EAAAD,EAAA,GAAY3U,EAAQK,YAAauU,GAAiBT,EAE3FK,GAA+BxU,EAASkV,EAAoBF,EAAU3B,aAAciB,EAAaC,GAKzG,CACF,CAwBA,IAAIY,GAAuB,WACzB,SAASA,IACP1Y,KAAK2Y,MAAQpZ,OAAOmF,OAAO,KAC7B,CAEA,IAAIkU,EAASF,EAAQG,UAqCrB,OAnCAD,EAAOzE,IAAM,SAAa2E,EAAGC,EAAGvF,GAC9B,IAAIwF,EAAQhZ,KAAK2Y,MAAMG,GACnBG,EAASD,GAASA,EAAMD,GAE5B,YAAe5M,IAAX8M,KAOyB,IAAzBzF,IACgB,IAAXyF,EAIX,EAEAL,EAAOxE,IAAM,SAAa0E,EAAGC,EAAGvF,GAC9BxT,KAAKkZ,YAAYJ,EAAGC,EAAGvF,GAEvBxT,KAAKkZ,YAAYH,EAAGD,EAAGtF,EACzB,EAEAoF,EAAOM,YAAc,SAAqBJ,EAAGC,EAAGvF,GAC9C,IAAIlJ,EAAMtK,KAAK2Y,MAAMG,GAEhBxO,IACHA,EAAM/K,OAAOmF,OAAO,MACpB1E,KAAK2Y,MAAMG,GAAKxO,GAGlBA,EAAIyO,GAAKvF,CACX,EAEOkF,CACT,CA3C2B,GCzchBS,GAAiB5Z,OAAO6Z,OAAO,CAAChL,EC5DpC,SAAkC7K,GACvC,IAAI8V,EAAsB9Z,OAAOmF,OAAO,MACxC,MAAO,CACLsK,oBAAqB,SAA6B5K,GAChD,IAAIkV,EAAgBlV,EAAK+B,KAUzB,OARImT,IACED,EAAoBC,EAAc3Z,OACpC4D,EAAQc,YAAY,IAAIC,EAAA,EAAa,0CAA2CkB,OAAO8T,EAAc3Z,MAAO,MAAQ,CAAC0Z,EAAoBC,EAAc3Z,OAAQ2Z,KAE/JD,EAAoBC,EAAc3Z,OAAS2Z,IAIxC,CACT,EACArK,mBAAoB,WAClB,OAAO,CACT,EAEJ,EClBO,SAAoC1L,GACzC,IAAIgW,EAAiB,EACrB,MAAO,CACLlL,SAAU,SAAkBjK,GAC1BmV,EAAiBnV,EAAK8E,YAAY0G,QAAO,SAAUrB,GACjD,OAAOA,EAAW/F,OAAS,wBAC7B,IAAGjI,MACL,EACAyO,oBAAqB,SAA6B5K,IAC3CA,EAAK+B,MAAQoT,EAAiB,GACjChW,EAAQc,YAAY,IAAIC,EAAA,EAAa,+DAAgEF,GAEzG,EAEJ,EChBO,SAAsCb,GAC3C,MAAO,CACLyL,oBAAqB,SAA6B5K,GACzB,iBAAnBA,EAAKkB,WACqC,IAAxClB,EAAKwS,aAAa0B,WAAW/X,QAC/BgD,EAAQc,YAAY,IAAIC,EAAA,EAAaF,EAAK+B,KAAO,iBAAkBX,OAAOpB,EAAK+B,KAAKxG,MAAO,2CAA8C,+DAAgEyE,EAAKwS,aAAa0B,WAAWxW,MAAM,IAGlP,EAEJ,EHkD0J+G,EIvDnJ,SAAuCtF,GAC5C,MAAO,CACLiW,eAAgB,SAAwBpV,GACtC,IAAI+T,EAAgB/T,EAAK+T,cAEzB,GAAIA,EAAe,CACjB,IAAInQ,GAAO,EAAAkQ,EAAA,GAAY3U,EAAQK,YAAauU,GAE5C,GAAInQ,KAAS,QAAgBA,GAAO,CAClC,IAAI0J,GAAU,OAAMyG,GACpB5U,EAAQc,YAAY,IAAIC,EAAA,EAAa,oDAAqDkB,OAAOkM,EAAS,MAAQyG,GACpH,CACF,CACF,EACAlJ,mBAAoB,SAA4B7K,GAC9C,IAAI4D,GAAO,EAAAkQ,EAAA,GAAY3U,EAAQK,YAAaQ,EAAK+T,eAEjD,GAAInQ,KAAS,QAAgBA,GAAO,CAClC,IAAI0J,GAAU,OAAMtN,EAAK+T,eACzB5U,EAAQc,YAAY,IAAIC,EAAA,EAAa,aAAckB,OAAOpB,EAAK+B,KAAKxG,MAAO,8CAAgD6F,OAAOkM,EAAS,MAAQtN,EAAK+T,eAC1J,CACF,EAEJ,ECxBO,SAAoC5U,GACzC,MAAO,CACLkW,mBAAoB,SAA4BrV,GAC9C,IAAI4D,GAAO,EAAAkQ,EAAA,GAAY3U,EAAQK,YAAaQ,EAAK4D,MAEjD,GAAIA,KAAS,QAAYA,GAAO,CAC9B,IAAI0R,EAAetV,EAAKuV,SAASxT,KAAKxG,MAClCuG,GAAW,OAAM9B,EAAK4D,MAC1BzE,EAAQc,YAAY,IAAIC,EAAA,EAAa,cAAekB,OAAOkU,EAAc,gCAAkClU,OAAOU,EAAU,MAAQ9B,EAAK4D,MAC3I,CACF,EAEJ,ECbO,SAAyBzE,GAC9B,MAAO,CACLkK,MAAO,SAAerJ,GACpB,IAAI4D,EAAOzE,EAAQ6C,UACfwQ,EAAexS,EAAKwS,aAExB,GAAI5O,EACF,IAAI,SAAW,QAAaA,KAC1B,GAAI4O,EAAc,CAChB,IAAI9O,EAAY1D,EAAK+B,KAAKxG,MACtB+R,GAAU,EAAAnG,EAAA,GAAQvD,GACtBzE,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOsC,EAAW,4CAA8CtC,OAAOkM,EAAS,uBAAyBkF,GAC3J,OACK,IAAKA,EAAc,CACxB,IAAIgD,EAAaxV,EAAK+B,KAAKxG,MAEvB2R,GAAW,EAAA/F,EAAA,GAAQvD,GAEvBzE,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOoU,EAAY,eAAiBpU,OAAO8L,EAAU,wDAA0D9L,OAAOoU,EAAY,cAAgBxV,GACpM,CAEJ,EAEJ,ECpBO,SAAiCb,GACtC,MAAO,CACLkK,MAAO,SAAerJ,GACpB,IAAI4D,EAAOzE,EAAQsW,gBAEnB,GAAI7R,IACazE,EAAQuW,cAER,CAEb,IAAItV,EAASjB,EAAQK,YACjBkE,EAAY1D,EAAK+B,KAAKxG,MAEtBoa,GAAa,EAAA3P,EAAA,GAAW,+BAmBtC,SAA+B5F,EAAQwD,EAAMF,GAC3C,KAAK,QAAeE,GAElB,MAAO,GAMT,IAHA,IAAIkC,EAAiB,IAAI8P,IACrBC,EAAa1a,OAAOmF,OAAO,MAEtBU,EAAM,EAAG8U,EAAyB1V,EAAO2V,iBAAiBnS,GAAO5C,EAAM8U,EAAuB3Z,OAAQ6E,IAAO,CACpH,IAAIgV,EAAeF,EAAuB9U,GAE1C,GAAKgV,EAAanS,YAAYH,GAA9B,CAKAoC,EAAekK,IAAIgG,GACnBH,EAAWG,EAAajU,MAAQ,EAEhC,IAAK,IAAI4E,EAAM,EAAGsP,EAAyBD,EAAaE,gBAAiBvP,EAAMsP,EAAuB9Z,OAAQwK,IAAO,CACnH,IAAIwP,EAEAC,EAAoBH,EAAuBtP,GAE1CyP,EAAkBvS,YAAYH,KAKnCoC,EAAekK,IAAIoG,GACnBP,EAAWO,EAAkBrU,OAA0E,QAAhEoU,EAAwBN,EAAWO,EAAkBrU,aAA6C,IAA1BoU,EAAmCA,EAAwB,GAAK,EACjL,CAlBA,CAmBF,CAEA,OAAO,EAAAE,EAAA,GAAUvQ,GAAgBwQ,MAAK,SAAUC,EAAOC,GAErD,IAAIC,EAAiBZ,EAAWW,EAAMzU,MAAQ8T,EAAWU,EAAMxU,MAE/D,OAAuB,IAAnB0U,EACKA,GAIL,QAAgBF,IAAUnW,EAAOsW,UAAUH,EAAOC,IAC5C,GAGN,QAAgBA,IAAUpW,EAAOsW,UAAUF,EAAOD,GAC7C,GAGF,EAAAI,EAAA,GAAeJ,EAAMxU,KAAMyU,EAAMzU,KAC1C,IAAGmE,KAAI,SAAU0Q,GACf,OAAOA,EAAE7U,IACX,GACF,CA3EsE8U,CAAsBzW,EAAQwD,EAAMF,IAE7E,KAAfiS,IACFA,GAAa,EAAA3P,EAAA,GA+EzB,SAAgCpC,EAAMF,GACpC,IAAI,QAAaE,KAAS,QAAgBA,GAAO,CAC/C,IAAIkT,EAAqB3b,OAAO8J,KAAKrB,EAAKC,aAC1C,OAAO,EAAAkC,EAAA,GAAerC,EAAWoT,EACnC,CAGA,MAAO,EACT,CAvFoCC,CAAuBnT,EAAMF,KAIvDvE,EAAQc,YAAY,IAAIC,EAAA,EAAa,uBAAwBkB,OAAOsC,EAAW,eAAiBtC,OAAOwC,EAAK7B,KAAM,MAAS4T,EAAY3V,GACzI,CAEJ,EAEJ,EC/BO,SAAiCb,GACtC,IAAI6X,EAAqB7b,OAAOmF,OAAO,MACvC,MAAO,CACLsK,oBAAqB,WACnB,OAAO,CACT,EACAC,mBAAoB,SAA4B7K,GAC9C,IAAIuK,EAAevK,EAAK+B,KAAKxG,MAQ7B,OANIyb,EAAmBzM,GACrBpL,EAAQc,YAAY,IAAIC,EAAA,EAAa,yCAA0CkB,OAAOmJ,EAAc,MAAQ,CAACyM,EAAmBzM,GAAevK,EAAK+B,QAEpJiV,EAAmBzM,GAAgBvK,EAAK+B,MAGnC,CACT,EAEJ,ER0C4SsI,EAAwBI,EStD7T,SAAqCtL,GAC1C,MAAO,CACLiW,eAAgB,SAAwBpV,GACtC,IAAIiX,EAAW9X,EAAQ6C,UACnBsR,EAAanU,EAAQsW,gBAEzB,IAAI,QAAgBwB,KAAa,QAAgB3D,MAAgB,QAAenU,EAAQK,YAAayX,EAAU3D,GAAa,CAC1H,IAAI4D,GAAgB,EAAA/P,EAAA,GAAQmM,GACxB6D,GAAc,EAAAhQ,EAAA,GAAQ8P,GAC1B9X,EAAQc,YAAY,IAAIC,EAAA,EAAa,sDAAuDkB,OAAO8V,EAAe,4BAA8B9V,OAAO+V,EAAa,MAAQnX,GAC9K,CACF,EACAsK,eAAgB,SAAwBtK,GACtC,IAAIkL,EAAWlL,EAAK+B,KAAKxG,MACrB0b,EAYV,SAAyB9X,EAAS4C,GAChC,IAAIqV,EAAOjY,EAAQqL,YAAYzI,GAE/B,GAAIqV,EAAM,CACR,IAAIxT,GAAO,EAAAkQ,EAAA,GAAY3U,EAAQK,YAAa4X,EAAKrD,eAEjD,IAAI,QAAgBnQ,GAClB,OAAOA,CAEX,CACF,CAtBqByT,CAAgBlY,EAAS+L,GACpCoI,EAAanU,EAAQsW,gBAEzB,GAAIwB,GAAY3D,KAAe,QAAenU,EAAQK,YAAayX,EAAU3D,GAAa,CACxF,IAAI4D,GAAgB,EAAA/P,EAAA,GAAQmM,GACxB6D,GAAc,EAAAhQ,EAAA,GAAQ8P,GAC1B9X,EAAQc,YAAY,IAAIC,EAAA,EAAa,aAAckB,OAAO8J,EAAU,gDAAkD9J,OAAO8V,EAAe,4BAA8B9V,OAAO+V,EAAa,MAAQnX,GACxM,CACF,EAEJ,ECpCO,SAA8Bb,GAGnC,IAAImY,EAAenc,OAAOmF,OAAO,MAE7BiX,EAAa,GAEbC,EAAwBrc,OAAOmF,OAAO,MAC1C,MAAO,CACLsK,oBAAqB,WACnB,OAAO,CACT,EACAC,mBAAoB,SAA4B7K,GAE9C,OADAyX,EAAqBzX,IACd,CACT,GAKF,SAASyX,EAAqBnI,GAC5B,IAAIgI,EAAahI,EAASvN,KAAKxG,OAA/B,CAIA,IAAIgP,EAAe+E,EAASvN,KAAKxG,MACjC+b,EAAa/M,IAAgB,EAC7B,IAAImN,EAAcvY,EAAQwY,mBAAmBrI,EAASkD,cAEtD,GAA2B,IAAvBkF,EAAYvb,OAAhB,CAIAqb,EAAsBjN,GAAgBgN,EAAWpb,OAEjD,IAAK,IAAI6E,EAAM,EAAGA,EAAM0W,EAAYvb,OAAQ6E,IAAO,CACjD,IAAI4W,EAAaF,EAAY1W,GACzB6W,EAAaD,EAAW7V,KAAKxG,MAC7Buc,EAAaN,EAAsBK,GAGvC,GAFAN,EAAW3N,KAAKgO,QAEG7P,IAAf+P,EAA0B,CAC5B,IAAIC,EAAiB5Y,EAAQqL,YAAYqN,GAErCE,GACFN,EAAqBM,EAEzB,KAAO,CACL,IAAIC,EAAYT,EAAW7Z,MAAMoa,GAC7BG,EAAUD,EAAUta,MAAM,GAAI,GAAGwI,KAAI,SAAUgS,GACjD,MAAO,IAAMA,EAAEnW,KAAKxG,MAAQ,GAC9B,IAAGwT,KAAK,MACR5P,EAAQc,YAAY,IAAIC,EAAA,EAAa,2BAA4BkB,OAAOyW,EAAY,oBAAmC,KAAZI,EAAiB,QAAQ7W,OAAO6W,EAAS,KAAO,KAAMD,GACnK,CAEAT,EAAWzN,KACb,CAEA0N,EAAsBjN,QAAgBxC,CA3BtC,CARA,CAoCF,CACF,ECtDO,SAAiC5I,GACtC,IAAIgZ,EAAqBhd,OAAOmF,OAAO,MACvC,MAAO,CACLsK,oBAAqB,WACnBuN,EAAqBhd,OAAOmF,OAAO,KACrC,EACA+U,mBAAoB,SAA4BrV,GAC9C,IAAIsV,EAAetV,EAAKuV,SAASxT,KAAKxG,MAElC4c,EAAmB7C,GACrBnW,EAAQc,YAAY,IAAIC,EAAA,EAAa,0CAA2CkB,OAAOkU,EAAc,MAAQ,CAAC6C,EAAmB7C,GAAetV,EAAKuV,SAASxT,QAE9JoW,EAAmB7C,GAAgBtV,EAAKuV,SAASxT,IAErD,EAEJ,ECfO,SAAkC5C,GACvC,IAAIiZ,EAAsBjd,OAAOmF,OAAO,MACxC,MAAO,CACLsK,oBAAqB,CACnBhD,MAAO,WACLwQ,EAAsBjd,OAAOmF,OAAO,KACtC,EACAuJ,MAAO,SAAe3I,GAGpB,IAFA,IAAImX,EAASlZ,EAAQmZ,2BAA2BpX,GAEvCF,EAAM,EAAGA,EAAMqX,EAAOlc,OAAQ6E,IAAO,CAC5C,IACIhB,EADQqY,EAAOrX,GACFhB,KACbuY,EAAUvY,EAAK+B,KAAKxG,OAEa,IAAjC6c,EAAoBG,IACtBpZ,EAAQc,YAAY,IAAIC,EAAA,EAAagB,EAAUa,KAAO,cAAeX,OAAOmX,EAAS,mCAAqCnX,OAAOF,EAAUa,KAAKxG,MAAO,MAAS,cAAe6F,OAAOmX,EAAS,qBAAuB,CAACvY,EAAMkB,IAEjO,CACF,GAEFmU,mBAAoB,SAA4BrV,GAC9CoY,EAAoBpY,EAAKuV,SAASxT,KAAKxG,QAAS,CAClD,EAEJ,ECzBO,SAA+B4D,GACpC,IAAIqZ,EAAe,GACnB,MAAO,CACL5N,oBAAqB,CACnBhD,MAAO,WACL4Q,EAAe,EACjB,EACA3O,MAAO,SAAe3I,GAIpB,IAHA,IAAIuX,EAAmBtd,OAAOmF,OAAO,MACjC+X,EAASlZ,EAAQmZ,2BAA2BpX,GAEvCF,EAAM,EAAGA,EAAMqX,EAAOlc,OAAQ6E,IAAO,CAG5CyX,EAFYJ,EAAOrX,GACFhB,KACK+B,KAAKxG,QAAS,CACtC,CAEA,IAAK,IAAIoL,EAAM,EAAG+R,EAAiBF,EAAc7R,EAAM+R,EAAevc,OAAQwK,IAAO,CACnF,IAAIgS,EAAcD,EAAe/R,GAC7B2O,EAAeqD,EAAYpD,SAASxT,KAAKxG,OAEN,IAAnCkd,EAAiBnD,IACnBnW,EAAQc,YAAY,IAAIC,EAAA,EAAagB,EAAUa,KAAO,cAAeX,OAAOkU,EAAc,kCAAoClU,OAAOF,EAAUa,KAAKxG,MAAO,MAAS,cAAe6F,OAAOkU,EAAc,oBAAsBqD,GAElO,CACF,GAEFtD,mBAAoB,SAA4BtQ,GAC9CyT,EAAa5O,KAAK7E,EACpB,EAEJ,Eb4BwdqB,EAAqBkB,ELjDte,SAAgCnI,GACrC,OAAOyM,EAAcA,EAAc,CAAC,EAAGO,EAAmChN,IAAW,CAAC,EAAG,CACvFmK,SAAU,SAAkBsD,GAC1B,IAAIgM,EAASzZ,EAAQ0Z,cACjBpV,EAAWtE,EAAQuW,cACnBpC,EAAanU,EAAQsW,gBAEzB,IAAKmD,GAAUnV,GAAY6P,EAAY,CACrC,IAAI/J,EAAUqD,EAAQ7K,KAAKxG,MACvBud,EAAiBrV,EAAS4I,KAAKnG,KAAI,SAAUoG,GAC/C,OAAOA,EAAIvK,IACb,IACI8K,GAAc,EAAA9G,EAAA,GAAewD,EAASuP,GAC1C3Z,EAAQc,YAAY,IAAIC,EAAA,EAAa,qBAAsBkB,OAAOmI,EAAS,gBAAkBnI,OAAOkS,EAAWvR,KAAM,KAAKX,OAAOqC,EAAS1B,KAAM,OAAS,EAAAiE,EAAA,GAAW6G,GAAcD,GACpL,CACF,GAEJ,EKgCsiBzD,EJpD/hB,SAAiChK,GACtC,MAAO,CACL4Z,UAAW,SAAmB/Y,GAG5B,IAAI4D,GAAO,QAAgBzE,EAAQ6Z,sBAEnC,KAAK,QAAWpV,GAEd,OADAkJ,EAAiB3N,EAASa,IACnB,CAEX,EACA2J,YAAa,SAAqB3J,GAChC,IAAI4D,GAAO,QAAazE,EAAQ6N,gBAEhC,KAAK,QAAkBpJ,GAErB,OADAkJ,EAAiB3N,EAASa,IACnB,EAQT,IAJA,IAAIiZ,GAAe,EAAAxL,EAAA,GAAOzN,EAAKuD,QAAQ,SAAU2V,GAC/C,OAAOA,EAAMnX,KAAKxG,KACpB,IAESyF,EAAM,EAAGmY,GAAiB,EAAAC,EAAA,GAAaxV,EAAKC,aAAc7C,EAAMmY,EAAehd,OAAQ6E,IAAO,CACrG,IAAIyC,EAAW0V,EAAenY,GAG9B,IAFgBiY,EAAaxV,EAAS1B,QAEpB,QAAqB0B,GAAW,CAChD,IAAI6J,GAAU,EAAAnG,EAAA,GAAQ1D,EAASG,MAC/BzE,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOwC,EAAK7B,KAAM,KAAKX,OAAOqC,EAAS1B,KAAM,wBAA0BX,OAAOkM,EAAS,uBAAyBtN,GAClK,CACF,CACF,EACA+J,YAAa,SAAqB/J,GAChC,IAAIsT,GAAa,QAAanU,EAAQ6Z,sBAGtC,IAFgB7Z,EAAQ6N,iBAEN,QAAkBsG,GAAa,CAC/C,IAAIzG,GAAc,EAAA9G,EAAA,GAAe/F,EAAK+B,KAAKxG,MAAOJ,OAAO8J,KAAKqO,EAAWzP,cACzE1E,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOpB,EAAK+B,KAAKxG,MAAO,8BAAgC6F,OAAOkS,EAAWvR,KAAM,OAAS,EAAAiE,EAAA,GAAW6G,GAAc7M,GACpK,CACF,EACAqZ,UAAW,SAAmBrZ,GAC5B,IAAI4D,EAAOzE,EAAQ6N,gBAEf,QAAcpJ,IAChBzE,EAAQc,YAAY,IAAIC,EAAA,EAAa,2BAA4BkB,QAAO,EAAA+F,EAAA,GAAQvD,GAAO,aAAcxC,QAAO,OAAMpB,GAAO,KAAMA,GAEnI,EACAsZ,UAAW,SAAmBtZ,GAC5B,OAAO8M,EAAiB3N,EAASa,EACnC,EACAuZ,SAAU,SAAkBvZ,GAC1B,OAAO8M,EAAiB3N,EAASa,EACnC,EACAwZ,WAAY,SAAoBxZ,GAC9B,OAAO8M,EAAiB3N,EAASa,EACnC,EACAyZ,YAAa,SAAqBzZ,GAChC,OAAO8M,EAAiB3N,EAASa,EACnC,EACA0Z,aAAc,SAAsB1Z,GAClC,OAAO8M,EAAiB3N,EAASa,EACnC,EAEJ,EC9DO,SAAuCb,GAC5C,OAAO,EAAc,EAAc,CAAC,EAAGoO,GAA0CpO,IAAW,CAAC,EAAG,CAC9FkK,MAAO,CAELQ,MAAO,SAAe8P,GACpB,IAAIC,EAEAnW,EAAWtE,EAAQuW,cAEvB,IAAKjS,EACH,OAAO,EAST,IALA,IAAIiK,EAA4D,QAAhDkM,EAAuBD,EAAU7N,iBAAgD,IAAzB8N,EAAkCA,EAAuB,GAC7H7L,GAAa,EAAAN,EAAA,GAAOC,GAAU,SAAUpB,GAC1C,OAAOA,EAAIvK,KAAKxG,KAClB,IAESyF,EAAM,EAAG6Y,EAAkBpW,EAAS4I,KAAMrL,EAAM6Y,EAAgB1d,OAAQ6E,IAAO,CACtF,IAAI4X,EAASiB,EAAgB7Y,GAG7B,IAFc+M,EAAW6K,EAAO7W,QAEhB,QAAmB6W,GAAS,CAC1C,IAAIzK,GAAa,EAAAhH,EAAA,GAAQyR,EAAOhV,MAChCzE,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOqC,EAAS1B,KAAM,gBAAkBX,OAAOwX,EAAO7W,KAAM,eAAiBX,OAAO+M,EAAY,2CAA6CwL,GAC/L,CACF,CACF,IAGN,ECzCO,SAAwCxa,GAC7C,IAAI2a,EAAY3e,OAAOmF,OAAO,MAC9B,MAAO,CACLsK,oBAAqB,CACnBhD,MAAO,WACLkS,EAAY3e,OAAOmF,OAAO,KAC5B,EACAuJ,MAAO,SAAe3I,GAGpB,IAFA,IAAImX,EAASlZ,EAAQmZ,2BAA2BpX,GAEvCF,EAAM,EAAGA,EAAMqX,EAAOlc,OAAQ6E,IAAO,CAC5C,IAAI3B,EAAQgZ,EAAOrX,GACfhB,EAAOX,EAAMW,KACb4D,EAAOvE,EAAMuE,KACbwK,EAAe/O,EAAM+O,aACrBmK,EAAUvY,EAAK+B,KAAKxG,MACpBwe,EAASD,EAAUvB,GAEvB,GAAIwB,GAAUnW,EAAM,CAMlB,IAAIxD,EAASjB,EAAQK,YACjB8O,GAAU,EAAAwF,EAAA,GAAY1T,EAAQ2Z,EAAOnW,MAEzC,GAAI0K,IAAYD,GAAqBjO,EAAQkO,EAASyL,EAAO3L,aAAcxK,EAAMwK,GAAe,CAC9F,IAAI4L,GAAa,EAAA7S,EAAA,GAAQmH,GACrBhB,GAAU,EAAAnG,EAAA,GAAQvD,GACtBzE,EAAQc,YAAY,IAAIC,EAAA,EAAa,cAAekB,OAAOmX,EAAS,eAAiBnX,OAAO4Y,EAAY,uCAAyC5Y,OAAOkM,EAAS,MAAQ,CAACyM,EAAQ/Z,IACpL,CACF,CACF,CACF,GAEFqV,mBAAoB,SAA4BrV,GAC9C8Z,EAAU9Z,EAAKuV,SAASxT,KAAKxG,OAASyE,CACxC,EAEJ,ECrBO,SAA0Cb,GAI/C,IAAIgQ,EAAwB,IAAImF,GAI5BpF,EAA+B,IAAI+K,IACvC,MAAO,CACLC,aAAc,SAAsB1H,GAGlC,IAFA,IAAIvD,EAyEV,SAAyC9P,EAAS+P,EAA8BC,EAAuBmE,EAAYd,GACjH,IAAIvD,EAAY,GAEZkL,EAAwBxH,GAA0BxT,EAAS+P,EAA8BoE,EAAYd,GACrGnD,EAAW8K,EAAsB,GACjCzG,EAAgByG,EAAsB,GAM1C,GAwIF,SAAgChb,EAAS8P,EAAWC,EAA8BC,EAAuBE,GAKvG,IAAK,IAAI+K,EAAM,EAAGC,GAAkB,EAAAC,GAAA,GAAcjL,GAAW+K,EAAMC,EAAgBle,OAAQie,IAAO,CAChG,IAAIG,EAAQF,EAAgBD,GACxBvL,EAAe0L,EAAM,GACrBhX,EAASgX,EAAM,GAKnB,GAAIhX,EAAOpH,OAAS,EAClB,IAAK,IAAI0P,EAAI,EAAGA,EAAItI,EAAOpH,OAAQ0P,IACjC,IAAK,IAAI0E,EAAI1E,EAAI,EAAG0E,EAAIhN,EAAOpH,OAAQoU,IAAK,CAC1C,IAAIK,EAAWC,GAAa1R,EAAS+P,EAA8BC,GAAuB,EAC1FN,EAActL,EAAOsI,GAAItI,EAAOgN,IAE5BK,GACF3B,EAAUrF,KAAKgH,EAEnB,CAGN,CACF,CApKE4J,CAAuBrb,EAAS8P,EAAWC,EAA8BC,EAAuBE,GAEnE,IAAzBqE,EAAcvX,OAGhB,IAAK,IAAI0P,EAAI,EAAGA,EAAI6H,EAAcvX,OAAQ0P,IAAK,CAC7CmD,GAAyC7P,EAAS8P,EAAWC,EAA8BC,GAAuB,EAAOE,EAAUqE,EAAc7H,IAKjJ,IAAK,IAAI0E,EAAI1E,EAAI,EAAG0E,EAAImD,EAAcvX,OAAQoU,IAC5CX,GAAiCzQ,EAAS8P,EAAWC,EAA8BC,GAAuB,EAAOuE,EAAc7H,GAAI6H,EAAcnD,GAErJ,CAGF,OAAOtB,CACT,CApGsBwL,CAAgCtb,EAAS+P,EAA8BC,EAAuBhQ,EAAQsW,gBAAiBjD,GAE9HxR,EAAM,EAAGA,EAAMiO,EAAU9S,OAAQ6E,IAAO,CAC/C,IAAI0Z,EAAQzL,EAAUjO,GAClB2Z,EAASD,EAAM,GACf7L,EAAe8L,EAAO,GACtB/L,EAAS+L,EAAO,GAChBhK,EAAU+J,EAAM,GAChBhK,EAAUgK,EAAM,GAChBE,EAAYjM,GAAcC,GAC9BzP,EAAQc,YAAY,IAAIC,EAAA,EAAa,WAAYkB,OAAOyN,EAAc,uBAAwBzN,OAAOwZ,EAAW,gFAAiFjK,EAAQvP,OAAOsP,IAClN,CACF,EAEJ,ECayrBlH,I,IAK1pBrO,OAAO6Z,OAAO,CAAC9V,EAA0BiB,EAA0BkB,EAAqBY,EAA0Bc,EAAgCe,EAA0BW,EAAoB2B,EAAqBkB,EAAiCkB,EAA4B2D,EAAoChD,EAAyBK,EAA2B+D,K,6CcxEzY,SAASsN,GAAeC,EAAUC,GAAcD,EAASrG,UAAYtZ,OAAOmF,OAAOya,EAAWtG,WAAYqG,EAASrG,UAAU/Y,YAAcof,EAAUA,EAASE,UAAYD,CAAY,CAW/K,IAAIE,GAAoC,WAC7C,SAASA,EAAqBC,EAAKC,GACjCvf,KAAKwf,KAAOF,EACZtf,KAAKyf,gBAAatT,EAClBnM,KAAK0f,iBAAmB,IAAIrB,IAC5Bre,KAAK2f,gCAAkC,IAAItB,IAC3Cre,KAAK4f,SAAWL,CAClB,CAEA,IAAI3G,EAASyG,EAAqBxG,UAsFlC,OApFAD,EAAOvU,YAAc,SAAqBkN,GACxCvR,KAAK4f,SAASrO,EAChB,EAEAqH,EAAO3P,YAAc,WACnB,OAAOjJ,KAAKwf,IACd,EAEA5G,EAAOhK,YAAc,SAAqBzI,GACxC,IAAI0Z,EAAY7f,KAAKyf,WAYrB,OAVKI,IACH7f,KAAKyf,WAAaI,EAAY7f,KAAKiJ,cAAcC,YAAYmO,QAAO,SAAUyI,EAAOC,GAKnF,OAJIA,EAAUvX,OAAS,0BACrBsX,EAAMC,EAAU5Z,KAAKxG,OAASogB,GAGzBD,CACT,GAAGvgB,OAAOmF,OAAO,QAGZmb,EAAU1Z,EACnB,EAEAyS,EAAOmD,mBAAqB,SAA4B3X,GACtD,IAAI4b,EAAUhgB,KAAK0f,iBAAiB9H,IAAIxT,GAExC,IAAK4b,EAAS,CACZA,EAAU,GAGV,IAFA,IAAIC,EAAc,CAAC7b,GAEW,IAAvB6b,EAAY1f,QAGjB,IAFA,IAES6E,EAAM,EAAG8a,EAFRD,EAAY/R,MAEmBoK,WAAYlT,EAAM8a,EAAiB3f,OAAQ6E,IAAO,CACzF,IAAImT,EAAY2H,EAAiB9a,GAE7BmT,EAAU/P,OAAS,oBACrBwX,EAAQhS,KAAKuK,GACJA,EAAU3B,cACnBqJ,EAAYjS,KAAKuK,EAAU3B,aAE/B,CAGF5W,KAAK0f,iBAAiB1H,IAAI5T,EAAM4b,EAClC,CAEA,OAAOA,CACT,EAEApH,EAAOxJ,kCAAoC,SAA2C9J,GACpF,IAAIua,EAAY7f,KAAK2f,gCAAgC/H,IAAItS,GAEzD,IAAKua,EAAW,CACdA,EAAY,GAIZ,IAHA,IAAIM,EAAiB5gB,OAAOmF,OAAO,MAC/B0b,EAAe,CAAC9a,EAAUsR,cAEC,IAAxBwJ,EAAa7f,QAGlB,IAFA,IAAI6D,EAAOgc,EAAalS,MAEfnD,EAAM,EAAGsV,EAAyBrgB,KAAK+b,mBAAmB3X,GAAO2G,EAAMsV,EAAuB9f,OAAQwK,IAAO,CACpH,IACIuE,EADS+Q,EAAuBtV,GACd5E,KAAKxG,MAE3B,IAAiC,IAA7BwgB,EAAe7Q,GAAoB,CACrC6Q,EAAe7Q,IAAY,EAC3B,IAAIoE,EAAW1T,KAAK4O,YAAYU,GAE5BoE,IACFmM,EAAU7R,KAAK0F,GACf0M,EAAapS,KAAK0F,EAASkD,cAE/B,CACF,CAGF5W,KAAK2f,gCAAgC3H,IAAI1S,EAAWua,EACtD,CAEA,OAAOA,CACT,EAEOR,CACT,CAhG+C,GAoHpCiB,GAAiC,SAAUC,GAGpD,SAASD,EAAkB9b,EAAQ8a,EAAKkB,EAAUjB,GAChD,IAAIkB,EAOJ,OALAA,EAASF,EAAuBG,KAAK1gB,KAAMsf,EAAKC,IAAYvf,MACrD2gB,QAAUnc,EACjBic,EAAOG,UAAYJ,EACnBC,EAAOI,gBAAkB,IAAIxC,IAC7BoC,EAAOK,yBAA2B,IAAIzC,IAC/BoC,CACT,CAXAxB,GAAeqB,EAAmBC,GAalC,IAAIQ,EAAUT,EAAkBzH,UAiFhC,OA/EAkI,EAAQnd,UAAY,WAClB,OAAO5D,KAAK2gB,OACd,EAEAI,EAAQC,kBAAoB,SAA2B5c,GACrD,IAAIqY,EAASzc,KAAK6gB,gBAAgBjJ,IAAIxT,GAEtC,IAAKqY,EAAQ,CACX,IAAIwE,EAAY,GACZT,EAAW,IAAIU,GAAA,EAASlhB,KAAK2gB,UACjC,SAAMvc,GAAM,QAAkBoc,EAAU,CACtC/G,mBAAoB,WAClB,OAAO,CACT,EACA0H,SAAU,SAAkBxH,GAC1BsH,EAAUjT,KAAK,CACb5J,KAAMuV,EACN3R,KAAMwY,EAASpP,eACfoB,aAAcgO,EAASY,mBAE3B,KAEF3E,EAASwE,EAETjhB,KAAK6gB,gBAAgB7I,IAAI5T,EAAMqY,EACjC,CAEA,OAAOA,CACT,EAEAsE,EAAQrE,2BAA6B,SAAoCpX,GACvE,IAAImX,EAASzc,KAAK8gB,yBAAyBlJ,IAAItS,GAE/C,IAAKmX,EAAQ,CACXA,EAASzc,KAAKghB,kBAAkB1b,GAEhC,IAAK,IAAI8G,EAAM,EAAGiV,EAAyBrhB,KAAKoP,kCAAkC9J,GAAY8G,EAAMiV,EAAuB9gB,OAAQ6L,IAAO,CACxI,IAAIoP,EAAO6F,EAAuBjV,GAClCqQ,EAASA,EAAOjX,OAAOxF,KAAKghB,kBAAkBxF,GAChD,CAEAxb,KAAK8gB,yBAAyB9I,IAAI1S,EAAWmX,EAC/C,CAEA,OAAOA,CACT,EAEAsE,EAAQ3a,QAAU,WAChB,OAAOpG,KAAK4gB,UAAUxa,SACxB,EAEA2a,EAAQlH,cAAgB,WACtB,OAAO7Z,KAAK4gB,UAAU/G,eACxB,EAEAkH,EAAQ3P,aAAe,WACrB,OAAOpR,KAAK4gB,UAAUxP,cACxB,EAEA2P,EAAQ3D,mBAAqB,WAC3B,OAAOpd,KAAK4gB,UAAUxD,oBACxB,EAEA2D,EAAQjH,YAAc,WACpB,OAAO9Z,KAAK4gB,UAAU9G,aACxB,EAEAiH,EAAQzY,aAAe,WACrB,OAAOtI,KAAK4gB,UAAUtY,cACxB,EAEAyY,EAAQ9D,YAAc,WACpB,OAAOjd,KAAK4gB,UAAU3D,aACxB,EAEA8D,EAAQO,aAAe,WACrB,OAAOthB,KAAK4gB,UAAUU,cACxB,EAEOhB,CACT,CAhG4C,CAgG1CjB,ICvMK,SAAS,GAAS7a,EAAQ+c,GAC/B,IAAIC,EAAQtR,UAAU3P,OAAS,QAAsB4L,IAAjB+D,UAAU,GAAmBA,UAAU,GAAKiJ,GAC5EqH,EAAWtQ,UAAU3P,OAAS,QAAsB4L,IAAjB+D,UAAU,GAAmBA,UAAU,GAAK,IAAIgR,GAAA,EAAS1c,GAC5Fid,EAAUvR,UAAU3P,OAAS,QAAsB4L,IAAjB+D,UAAU,GAAmBA,UAAU,GAAK,CAChFwR,eAAWvV,GAEboV,IAAe,EAAAI,GAAA,GAAU,EAAG,2BAE5B,QAAkBnd,GAClB,IAAIod,EAAWriB,OAAO6Z,OAAO,CAAC,GAC1ByI,EAAS,GACTte,EAAU,IAAI+c,GAAkB9b,EAAQ+c,EAAaf,GAAU,SAAUjP,GAC3E,GAAyB,MAArBkQ,EAAQC,WAAqBG,EAAOthB,QAAUkhB,EAAQC,UAExD,MADAG,EAAO7T,KAAK,IAAI1J,EAAA,EAAa,yEACvBsd,EAGRC,EAAO7T,KAAKuD,EACd,IAGIuQ,GAAU,SAAgBN,EAAMlX,KAAI,SAAUyX,GAChD,OAAOA,EAAKxe,EACd,KAEA,KACE,SAAMge,GAAa,QAAkBf,EAAUsB,GAKjD,CAJE,MAAOE,GACP,GAAIA,IAAMJ,EACR,MAAMI,CAEV,CAEA,OAAOH,CACT,C,gBC5CO,SAASI,GAAuB1e,GACrC,MAAO,CACLkK,MAAO,SAAerJ,GACpB,IAAIyD,EAAWtE,EAAQuW,cACnBoI,EAAiC,OAAbra,QAAkC,IAAbA,OAAsB,EAASA,EAASqa,kBAErF,GAAIra,GAAiC,MAArBqa,EAA2B,CACzC,IAAIxK,EAAanU,EAAQsW,gBACX,MAAdnC,IAAsB,EAAApM,EAAA,GAAU,GAChC/H,EAAQc,YAAY,IAAIC,EAAA,EAAa,aAAakB,OAAOkS,EAAWvR,KAAM,KAAKX,OAAOqC,EAAS1B,KAAM,oBAAoBX,OAAO0c,GAAoB9d,GACtJ,CACF,EACAsJ,SAAU,SAAkBtJ,GAC1B,IAAI4Y,EAASzZ,EAAQ0Z,cACjBiF,EAA+B,OAAXlF,QAA8B,IAAXA,OAAoB,EAASA,EAAOkF,kBAE/E,GAAIlF,GAA+B,MAArBkF,EAA2B,CACvC,IAAIC,EAAe5e,EAAQ+E,eAE3B,GAAoB,MAAhB6Z,EACF5e,EAAQc,YAAY,IAAIC,EAAA,EAAa,eAAgBkB,OAAO2c,EAAahc,KAAM,gBAAkBX,OAAOwX,EAAO7W,KAAM,qBAAsBX,OAAO0c,GAAoB9d,QACjK,CACL,IAAIsT,EAAanU,EAAQsW,gBACrBhS,EAAWtE,EAAQuW,cACT,MAAdpC,GAAkC,MAAZ7P,IAAoB,EAAAyD,EAAA,GAAU,GACpD/H,EAAQc,YAAY,IAAIC,EAAA,EAAa,UAAWkB,OAAOkS,EAAWvR,KAAM,KAAKX,OAAOqC,EAAS1B,KAAM,gBAAkBX,OAAOwX,EAAO7W,KAAM,qBAAsBX,OAAO0c,GAAoB9d,GAC5L,CACF,CACF,EACA+J,YAAa,SAAqB/J,GAChC,IAAIge,GAAiB,QAAa7e,EAAQ6Z,sBAE1C,IAAI,QAAkBgF,GAAiB,CACrC,IAAIC,EAAgBD,EAAena,YAAY7D,EAAK+B,KAAKxG,OAErDuiB,EAAsC,OAAlBG,QAA4C,IAAlBA,OAA2B,EAASA,EAAcH,kBAE3E,MAArBA,GACF3e,EAAQc,YAAY,IAAIC,EAAA,EAAa,mBAAmBkB,OAAO4c,EAAejc,KAAM,KAAKX,OAAO6c,EAAclc,KAAM,oBAAoBX,OAAO0c,GAAoB9d,GAEvK,CACF,EACAsZ,UAAW,SAAmBtZ,GAC5B,IAAIke,EAAe/e,EAAQ+d,eACvBY,EAAqC,OAAjBI,QAA0C,IAAjBA,OAA0B,EAASA,EAAaJ,kBAEjG,GAAII,GAAqC,MAArBJ,EAA2B,CAC7C,IAAIK,GAAc,QAAahf,EAAQ6N,gBACxB,MAAfmR,IAAuB,EAAAjX,EAAA,GAAU,GACjC/H,EAAQc,YAAY,IAAIC,EAAA,EAAa,mBAAoBkB,OAAO+c,EAAYpc,KAAM,KAAKX,OAAO8c,EAAanc,KAAM,qBAAsBX,OAAO0c,GAAoB9d,GACpK,CACF,EAEJ,C,qCCnEI9E,I,kBAAYC,OAAOC,gBACnBC,GAAS,CAACC,EAAQC,IAAUL,GAAUI,EAAQ,OAAQ,CAAEC,QAAOC,cAAc,IAQjF,MAAM,GAAoB,CACxB0D,EACAiB,EACAkB,EACAY,EACAc,EACAe,EACAW,EACA2B,EACAkB,EACAkB,EACAW,EACAK,GAEF,SAAS4U,GAAwBhe,EAAQ8a,EAAKmD,EAAaC,EAAmBC,GAC5E,MAAMnB,EAAQrI,GAAevJ,QAAQmS,GAC/BA,IAASlT,GAAyBkT,IAAS3T,KAG3CsU,GAAqBX,IAAStT,KAKhCgU,GACF1gB,MAAM8W,UAAU7K,KAAK+B,MAAMyR,EAAOiB,GAEhCE,GACF5gB,MAAM8W,UAAU7K,KAAK+B,MAAMyR,EAAO,IAGpC,OADe,GAAShd,EAAQ8a,EAAKkC,GACvB5R,QAAQ2B,IACpB,IAAoD,IAAhDA,EAAME,QAAQzH,QAAQ,sBAA+BuH,EAAMqR,MAAO,CACpE,MAAMxe,EAAOmN,EAAMqR,MAAM,GACzB,GAAIxe,GAAQA,EAAKoE,OAAS,cAAgB,CACxC,MAAMrC,EAAO/B,EAAK+B,KAAKxG,MACvB,GAAa,cAATwG,GAAiC,wBAATA,EAC1B,OAAO,CAEX,CACF,CACA,OAAO,CAAI,GAEf,CACA1G,GAAO+iB,GAAyB,2BAChC,MAMMK,GAAsB,CAC1B,CANO,SAMa,EACpB,CANS,WAMa,EACtB,CANa,eAMa,EAC1B,CANM,QAMa,GAEf,GAA4BpjB,IAAO,CAACqjB,EAAWrR,KACnD,IAAKqR,EACH,MAAM,IAAIC,MAAMtR,EAClB,GACC,aACH,SAASuR,GAAepe,EAAOJ,EAAS,KAAMie,EAAaC,EAAmBO,GAC5E,IAAIC,EAAIC,EACR,IAAI7D,EAAM,KACN2D,IAEAre,GAD+B,kBAAtBqe,EACA,OAASA,EAET,OAASA,EAAkB5L,QAAO,CAAC+L,EAAKhf,IAC/Cgf,IAAO,OAAMhf,GAAQ,QAEpB,KAGP,IACEkb,GAAM,SAAM1a,EAcd,CAbE,MAAO2M,GACP,GAAIA,aAAiBjN,EAAA,EAAc,CACjC,MAAM+e,EAAQC,GAAsF,QAA5EH,EAAgC,QAA1BD,EAAK3R,EAAM1G,iBAA8B,IAAPqY,OAAgB,EAASA,EAAG,UAAuB,IAAPC,EAAgBA,EAAK,CAAEpgB,KAAM,EAAGZ,OAAQ,GAAKyC,GACzJ,MAAO,CACL,CACE2e,SAAUV,GAAoBE,MAC9BtR,QAASF,EAAME,QACftB,OAAQ,kBACRkT,SAGN,CACA,MAAM9R,CACR,CACA,OAAOiS,GAAclE,EAAK9a,EAAQie,EAAaC,EACjD,CAEA,SAASc,GAAclE,EAAK9a,EAAS,KAAMie,EAAaC,GACtD,IAAKle,EACH,MAAO,GAET,MAAMif,EAA6BC,GAAOlB,GAAwBhe,EAAQ8a,EAAKmD,EAAaC,IAAqBnR,GAAUoS,GAAYpS,EAAOsR,GAAoBE,MAAO,gBACnKa,EAAgCF,GAAO,GAASlf,EAAQ8a,EAAK,CAAC2C,MAA2B1Q,GAAUoS,GAAYpS,EAAOsR,GAAoBgB,QAAS,iBACzJ,OAAOJ,EAA2Bje,OAAOoe,EAC3C,CAEA,SAASF,GAAOI,EAAOC,GACrB,OAAOhiB,MAAM8W,UAAUrT,OAAOuK,MAAM,GAAI+T,EAAMxZ,IAAIyZ,GACpD,CAEA,SAASJ,GAAYpS,EAAOgS,EAAUvb,GACpC,IAAKuJ,EAAMqR,MACT,MAAO,GAET,MAAMoB,EAAmB,GAgBzB,OAfAzS,EAAMqR,MAAMxS,SAAShM,IACnB,MAAM6f,EAA8B,aAAd7f,EAAKoE,MAAuB,SAAUpE,QAAsB,IAAdA,EAAK+B,KAAkB/B,EAAK+B,KAAO,aAAc/B,QAA0B,IAAlBA,EAAKuV,SAAsBvV,EAAKuV,SAAWvV,EACxK,GAAI6f,EAAe,CACjB,GAAU1S,EAAM1G,UAAW,gDAC3B,MAAMqZ,EAAM3S,EAAM1G,UAAU,GACtBsZ,EAAeC,GAAYH,GAC3BphB,EAAMqhB,EAAI/hB,QAAUgiB,EAAathB,IAAMshB,EAAavhB,OAC1DohB,EAAiBhW,KAAK,CACpBmC,OAAQ,YAAYnI,IACpByJ,QAASF,EAAME,QACf8R,WACAF,MAAO,IAAI,GAAAgB,EAAM,IAAI,GAAAC,EAASJ,EAAInhB,KAAO,EAAGmhB,EAAI/hB,OAAS,GAAI,IAAI,GAAAmiB,EAASJ,EAAInhB,KAAO,EAAGF,KAE5F,KAEKmhB,CACT,CAEA,SAASV,GAASiB,EAAUC,GAC1B,MAAMC,GAAS,KAAAC,KACTC,EAAQF,EAAOG,aACfC,EAAQL,EAAUM,MAAM,MAC9B,GAAUD,EAAMtkB,QAAUgkB,EAASxhB,KAAM,iEACzC,IAAIgiB,EAAS,KACb,IAAK,IAAI9U,EAAI,EAAGA,EAAIsU,EAASxhB,KAAMkN,IAEjC,IADA8U,EAAS,IAAI,GAAAC,EAAgBH,EAAM5U,KAC3B8U,EAAO1kB,OAAO,CAEpB,GAAc,gBADAokB,EAAO/iB,MAAMqjB,EAAQJ,GAEjC,KAEJ,CAEF,GAAUI,EAAQ,2CAClB,MAAMhiB,EAAOwhB,EAASxhB,KAAO,EACvBH,EAAQmiB,EAAO9kB,kBACf4C,EAAMkiB,EAAO5kB,qBACnB,OAAO,IAAI,GAAAkkB,EAAM,IAAI,GAAAC,EAASvhB,EAAMH,GAAQ,IAAI,GAAA0hB,EAASvhB,EAAMF,GACjE,CAEA,SAASuhB,GAAYhgB,GACnB,MACMmgB,EADiBngB,EACS8f,IAEhC,OADA,GAAUK,EAAU,wCACbA,CACT,CAhEA9kB,GAAOujB,GAAgB,kBASvBvjB,GAAO+jB,GAAe,iBAItB/jB,GAAOikB,GAAQ,UAuBfjkB,GAAOkkB,GAAa,eAsBpBlkB,GAAO6jB,GAAU,YAOjB7jB,GAAO2kB,GAAa,eACpB,MAAMa,GAAW,CAAC,QAAS,UAAW,cAAe,QAC/CC,GAAO,CACX,sBAAuB,aACvB,uBAAwB,cACxB,kBAAmB,UAErB,EAAAF,EAAA,eAA0B,OAAQ,WAAW,CAACG,EAAM1D,IAE/BuB,GAAemC,EADnB1D,EAAQjd,OACyBid,EAAQ2D,qBAAiB,EAAQ3D,EAAQwB,mBAC9D3Y,KAAKiH,IAAU,CACxCE,QAASF,EAAME,QACf8R,SAAUhS,EAAMgS,SAAW0B,GAAS1T,EAAMgS,SAAW,GAAK0B,GAAS,GACnEjd,KAAMuJ,EAAMpB,OAAS+U,GAAK3T,EAAMpB,aAAU,EAC1CkV,KAAM,EAAAL,EAAA,IAAezT,EAAM8R,MAAMzgB,MAAMG,KAAMwO,EAAM8R,MAAMzgB,MAAMF,WAC/D4iB,GAAI,EAAAN,EAAA,IAAezT,EAAM8R,MAAMxgB,IAAIE,KAAMwO,EAAM8R,MAAMxgB,IAAIH,gB,kFCtLzDpD,EAAYC,OAAOC,eACnBC,EAAS,CAACC,EAAQC,IAAUL,EAAUI,EAAQ,OAAQ,CAAEC,QAAOC,cAAc,IAGjF,SAAS2lB,EAAa9D,EAAU,CAC9B+D,cAAgBT,GAAWA,EAAO/jB,SAAS,EAAAiP,GAC3CwV,SAAU,EAAAC,EACVC,WAAY,EAAArB,EACZsB,aAAc,CAAC,IAEf,MAAO,CACLhB,aACE,MAAMiB,EAAe,CACnBC,MAAO,EACPC,KAAM,EACN5f,KAAM,KACNqC,KAAM,KACNR,KAAM,KACN+Z,KAAM,KACNiE,gBAAgB,EAChBC,UAAW,MAGb,OADAC,EAASzE,EAAQkE,WAAYE,EAAc,cACpCA,CACT,EACAnkB,MAAMqjB,EAAQJ,GACZ,OAAOwB,EAASpB,EAAQJ,EAAOlD,EACjC,EAEJ,CAEA,SAAS0E,EAASpB,EAAQJ,EAAOlD,GAC/B,IAAIyB,EACJ,GAAIyB,EAAMyB,cACR,OAAIrB,EAAO9jB,MAAM,UACf0jB,EAAMyB,eAAgB,EACf,WAEPrB,EAAO1jB,YACA,UAGX,MAAM,SAAEokB,EAAQ,WAAEE,EAAU,cAAEH,EAAa,aAAEI,GAAiBnE,EAO9D,GANIkD,EAAM5C,MAA8B,IAAtB4C,EAAM5C,KAAKxhB,OAC3B8lB,EAAQ1B,GACCA,EAAM2B,eACf3B,EAAM2B,cAAe,EACrBC,EAAY5B,GAAO,IAEjBI,EAAOvkB,MAAO,CAChB,MAAMgmB,GAA4B,OAAjBZ,QAA0C,IAAjBA,OAA0B,EAASA,EAAaY,UAAY,EACtG7B,EAAM8B,YAAcC,KAAKC,MAAM5B,EAAO3iB,cAAgBokB,EACxD,CACA,GAAIhB,EAAcT,GAChB,MAAO,KAET,MAAMrjB,EAAQklB,EAAInB,EAAUV,GAC5B,IAAKrjB,EAAO,CAMV,OALyBqjB,EAAO9jB,MAAM,QAEpC8jB,EAAO9jB,MAAM,MAEfilB,EAASW,EAAmBlC,EAAO,WAC5B,aACT,CACA,GAAmB,YAAfjjB,EAAM8G,KAER,OADA0d,EAASW,EAAmBlC,EAAO,WAC5B,UAET,MAAMmC,EAAcC,EAAO,CAAC,EAAGpC,GAC/B,GAAmB,gBAAfjjB,EAAM8G,KACR,GAAI,SAAS5G,KAAKF,EAAM/B,YACI,IAAtBglB,EAAM8B,cACR9B,EAAMqC,QAAUrC,EAAMqC,QAAU,IAAIxhB,OAAOmf,EAAM8B,YAAc,SAE5D,GAAI,UAAU7kB,KAAKF,EAAM/B,OAAQ,CACtC,MAAMqnB,EAASrC,EAAMqC,QAAUrC,EAAMqC,QAAU,IAAIllB,MAAM,GAAI,GACzD6iB,EAAM8B,aACJO,EAAOzmB,OAAS,GAAKymB,EAAOA,EAAOzmB,OAAS,GAAKokB,EAAM8B,cACzD9B,EAAM8B,YAAcO,EAAOA,EAAOzmB,OAAS,GAGjD,CAEF,KAAOokB,EAAM5C,MAAM,CACjB,IAAIkF,EAAiC,oBAAftC,EAAM5C,KAAqC,IAAf4C,EAAMoB,KAAapB,EAAM5C,KAAKrgB,EAAOqjB,GAAU,KAAOJ,EAAM5C,KAAK4C,EAAMoB,MAIzH,GAHIpB,EAAMqB,iBACRiB,EAAwB,OAAbA,QAAkC,IAAbA,OAAsB,EAASA,EAASC,WAEtED,EAAU,CAIZ,GAHIA,EAASE,SACXF,EAAWA,EAASE,QAEE,kBAAbF,EAAuB,CAChCf,EAASP,EAAYhB,EAAOsC,GAC5B,QACF,CACA,GAA8B,QAAzB/D,EAAK+D,EAAShmB,aAA0B,IAAPiiB,OAAgB,EAASA,EAAGxC,KAAKuG,EAAUvlB,GAS/E,OARIulB,EAASG,QACXH,EAASG,OAAOzC,EAAOjjB,GAEN,gBAAfA,EAAM8G,KACR+d,EAAY5B,GAAO,GAEnBA,EAAM2B,cAAe,EAEhBW,EAASI,KAEpB,CACAC,EAAa3C,EACf,CAGA,OAFAoC,EAAOpC,EAAOmC,GACdZ,EAASW,EAAmBlC,EAAO,WAC5B,aACT,CAEA,SAASoC,EAAOzB,EAAID,GAClB,MAAMhc,EAAO9J,OAAO8J,KAAKgc,GACzB,IAAK,IAAIpV,EAAI,EAAGA,EAAI5G,EAAK9I,OAAQ0P,IAC/BqV,EAAGjc,EAAK4G,IAAMoV,EAAKhc,EAAK4G,IAE1B,OAAOqV,CACT,CA5FA7lB,EAAO8lB,EAAc,gBAqFrB9lB,EAAO0mB,EAAU,YAQjB1mB,EAAOsnB,EAAQ,UACf,MAAMF,EAAoB,CACxBU,QAAS,GACTC,QAAS,IAEX,SAAStB,EAAS1E,EAAOmD,EAAO8C,GAC9B,IAAKjG,EAAMiG,GACT,MAAM,IAAIC,UAAU,iBAAmBD,GAEzC9C,EAAMsB,UAAY1mB,OAAOwnB,OAAO,CAAC,EAAGpC,GACpCA,EAAMnc,KAAOif,EACb9C,EAAMxe,KAAO,KACbwe,EAAM3c,KAAO,KACb2c,EAAM5C,KAAOP,EAAMiG,GACnB9C,EAAMoB,KAAO,EACbpB,EAAMqB,gBAAiB,CACzB,CAEA,SAASK,EAAQ1B,GACVA,EAAMsB,YAGXtB,EAAMnc,KAAOmc,EAAMsB,UAAUzd,KAC7Bmc,EAAMxe,KAAOwe,EAAMsB,UAAU9f,KAC7Bwe,EAAM3c,KAAO2c,EAAMsB,UAAUje,KAC7B2c,EAAM5C,KAAO4C,EAAMsB,UAAUlE,KAC7B4C,EAAMoB,KAAOpB,EAAMsB,UAAUF,KAC7BpB,EAAMqB,eAAiBrB,EAAMsB,UAAUD,eACvCrB,EAAMsB,UAAYtB,EAAMsB,UAAUA,UACpC,CAEA,SAASM,EAAY5B,EAAOgD,GAC1B,IAAIzE,EACJ,GAAI0E,EAAOjD,IAAUA,EAAM5C,KAAM,CAC/B,MAAMgE,EAAOpB,EAAM5C,KAAK4C,EAAMoB,MAC9B,GAAIA,EAAKmB,UAAW,CAClB,MAAMA,EAAYnB,EAAKmB,UAEvB,GADAvC,EAAMqB,gBAAkBrB,EAAMqB,gBACzBrB,EAAMqB,gBAAkBkB,EAAUC,OACrC,MAEJ,CACA,GAAIQ,EACF,MAEJ,CAGA,IAFAhD,EAAMqB,gBAAiB,EACvBrB,EAAMoB,OACCpB,EAAM5C,QAAUhgB,MAAM+H,QAAQ6a,EAAM5C,OAAS4C,EAAMoB,KAAOpB,EAAM5C,KAAKxhB,SAC1E8lB,EAAQ1B,GACJA,EAAM5C,OACJ6F,EAAOjD,IACiB,QAArBzB,EAAKyB,EAAM5C,YAAyB,IAAPmB,OAAgB,EAASA,EAAGyB,EAAMoB,MAAMmB,aACxEvC,EAAMqB,gBAAkBrB,EAAMqB,iBAGhCrB,EAAMqB,gBAAiB,EACvBrB,EAAMoB,QAId,CAEA,SAAS6B,EAAOjD,GACd,MAAMoB,EAAOhkB,MAAM+H,QAAQ6a,EAAM5C,OAA2C,kBAA3B4C,EAAM5C,KAAK4C,EAAMoB,OAAsBpB,EAAM5C,KAAK4C,EAAMoB,MACzG,OAAOA,GAAQA,EAAK6B,MACtB,CAEA,SAASN,EAAa3C,GACpB,KAAOA,EAAM5C,QAAUhgB,MAAM+H,QAAQ6a,EAAM5C,QAAS4C,EAAM5C,KAAK4C,EAAMoB,MAAMoB,SACzEd,EAAQ1B,GAENA,EAAM5C,MACRwE,EAAY5B,GAAO,EAEvB,CAEA,SAASiC,EAAInB,EAAUV,GACrB,MAAM8C,EAAQtoB,OAAO8J,KAAKoc,GAC1B,IAAK,IAAIxV,EAAI,EAAGA,EAAI4X,EAAMtnB,OAAQ0P,IAAK,CACrC,MAAMhP,EAAQ8jB,EAAO9jB,MAAMwkB,EAASoC,EAAM5X,KAC1C,GAAIhP,GAASA,aAAiBc,MAC5B,MAAO,CAAEyG,KAAMqf,EAAM5X,GAAItQ,MAAOsB,EAAM,GAE1C,CACF,CApEAxB,EAAOymB,EAAU,YAajBzmB,EAAO4mB,EAAS,WAgChB5mB,EAAO8mB,EAAa,eAKpB9mB,EAAOmoB,EAAQ,UASfnoB,EAAO6nB,EAAc,gBAUrB7nB,EAAOmnB,EAAK,M","sources":["webpack://app/./node_modules/@graphiql/react/dist/Range.es.js","webpack://app/./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs","webpack://app/./node_modules/graphql/language/predicates.mjs","webpack://app/./node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs","webpack://app/./node_modules/graphql/validation/rules/KnownDirectivesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs","webpack://app/./node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs","webpack://app/./node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs","webpack://app/./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs","webpack://app/./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs","webpack://app/./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs","webpack://app/./node_modules/graphql/validation/specifiedRules.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs","webpack://app/./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs","webpack://app/./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/ScalarLeafsRule.mjs","webpack://app/./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs","webpack://app/./node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs","webpack://app/./node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs","webpack://app/./node_modules/graphql/validation/ValidationContext.mjs","webpack://app/./node_modules/graphql/validation/validate.mjs","webpack://app/./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs","webpack://app/./node_modules/@graphiql/react/dist/lint.es.js","webpack://app/./node_modules/@graphiql/react/dist/onlineParser.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nclass CharacterStream {\n  constructor(sourceText) {\n    this.getStartOfToken = () => this._start;\n    this.getCurrentPosition = () => this._pos;\n    this.eol = () => this._sourceText.length === this._pos;\n    this.sol = () => this._pos === 0;\n    this.peek = () => {\n      return this._sourceText.charAt(this._pos) ? this._sourceText.charAt(this._pos) : null;\n    };\n    this.next = () => {\n      const char = this._sourceText.charAt(this._pos);\n      this._pos++;\n      return char;\n    };\n    this.eat = (pattern) => {\n      const isMatched = this._testNextCharacter(pattern);\n      if (isMatched) {\n        this._start = this._pos;\n        this._pos++;\n        return this._sourceText.charAt(this._pos - 1);\n      }\n      return void 0;\n    };\n    this.eatWhile = (match) => {\n      let isMatched = this._testNextCharacter(match);\n      let didEat = false;\n      if (isMatched) {\n        didEat = isMatched;\n        this._start = this._pos;\n      }\n      while (isMatched) {\n        this._pos++;\n        isMatched = this._testNextCharacter(match);\n        didEat = true;\n      }\n      return didEat;\n    };\n    this.eatSpace = () => this.eatWhile(/[\\s\\u00a0]/);\n    this.skipToEnd = () => {\n      this._pos = this._sourceText.length;\n    };\n    this.skipTo = (position) => {\n      this._pos = position;\n    };\n    this.match = (pattern, consume = true, caseFold = false) => {\n      let token = null;\n      let match = null;\n      if (typeof pattern === \"string\") {\n        const regex = new RegExp(pattern, caseFold ? \"i\" : \"g\");\n        match = regex.test(this._sourceText.substr(this._pos, pattern.length));\n        token = pattern;\n      } else if (pattern instanceof RegExp) {\n        match = this._sourceText.slice(this._pos).match(pattern);\n        token = match === null || match === void 0 ? void 0 : match[0];\n      }\n      if (match != null) {\n        if (typeof pattern === \"string\" || match instanceof Array && this._sourceText.startsWith(match[0], this._pos)) {\n          if (consume) {\n            this._start = this._pos;\n            if (token && token.length) {\n              this._pos += token.length;\n            }\n          }\n          return match;\n        }\n      }\n      return false;\n    };\n    this.backUp = (num) => {\n      this._pos -= num;\n    };\n    this.column = () => this._pos;\n    this.indentation = () => {\n      const match = this._sourceText.match(/\\s*/);\n      let indent = 0;\n      if (match && match.length !== 0) {\n        const whiteSpaces = match[0];\n        let pos = 0;\n        while (whiteSpaces.length > pos) {\n          if (whiteSpaces.charCodeAt(pos) === 9) {\n            indent += 2;\n          } else {\n            indent++;\n          }\n          pos++;\n        }\n      }\n      return indent;\n    };\n    this.current = () => this._sourceText.slice(this._start, this._pos);\n    this._start = 0;\n    this._pos = 0;\n    this._sourceText = sourceText;\n  }\n  _testNextCharacter(pattern) {\n    const character = this._sourceText.charAt(this._pos);\n    let isMatched = false;\n    if (typeof pattern === \"string\") {\n      isMatched = character === pattern;\n    } else {\n      isMatched = pattern instanceof RegExp ? pattern.test(character) : pattern(character);\n    }\n    return isMatched;\n  }\n}\n__name(CharacterStream, \"CharacterStream\");\nclass Range {\n  constructor(start, end) {\n    this.containsPosition = (position) => {\n      if (this.start.line === position.line) {\n        return this.start.character <= position.character;\n      } else if (this.end.line === position.line) {\n        return this.end.character >= position.character;\n      } else {\n        return this.start.line <= position.line && this.end.line >= position.line;\n      }\n    };\n    this.start = start;\n    this.end = end;\n  }\n  setStart(line, character) {\n    this.start = new Position(line, character);\n  }\n  setEnd(line, character) {\n    this.end = new Position(line, character);\n  }\n}\n__name(Range, \"Range\");\nclass Position {\n  constructor(line, character) {\n    this.lessThanOrEqualTo = (position) => this.line < position.line || this.line === position.line && this.character <= position.character;\n    this.line = line;\n    this.character = character;\n  }\n  setLine(line) {\n    this.line = line;\n  }\n  setCharacter(character) {\n    this.character = character;\n  }\n}\n__name(Position, \"Position\");\nexport { CharacterStream as C, Position as P, Range as R };\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  var oldSchema = context.getSchema();\n  var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError('Cannot define a new schema within a schema extension.', node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError('Must provide only one schema definition.', node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {\n      var operationType = operationTypesNodes[_i2];\n      var operation = operationType.operation;\n      var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isEnumType } from \"../../type/definition.mjs\";\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    var valueNames = knownValueNames[typeName];\n\n    for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {\n      var valueDef = valueNodes[_i2];\n      var valueName = valueDef.name.value;\n      var existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), valueDef.name));\n      } else if (valueNames[valueName]) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\"), [valueNames[valueName], valueDef.name]));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n\n    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {\n      var fieldDef = fieldNodes[_i2];\n      var fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  var knownDirectiveNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    DirectiveDefinition: function DirectiveDefinition(node) {\n      var directiveName = node.name.value;\n\n      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {\n        context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName, \"\\\" already exists in the schema. It cannot be redefined.\"), node.name));\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(new GraphQLError(\"There can be only one directive named \\\"@\".concat(directiveName, \"\\\".\"), [knownDirectiveNames[directiveName], node.name]));\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import { Kind } from \"./kinds.mjs\";\nexport function isDefinitionNode(node) {\n  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);\n}\nexport function isExecutableDefinitionNode(node) {\n  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;\n}\nexport function isSelectionNode(node) {\n  return node.kind === Kind.FIELD || node.kind === Kind.FRAGMENT_SPREAD || node.kind === Kind.INLINE_FRAGMENT;\n}\nexport function isValueNode(node) {\n  return node.kind === Kind.VARIABLE || node.kind === Kind.INT || node.kind === Kind.FLOAT || node.kind === Kind.STRING || node.kind === Kind.BOOLEAN || node.kind === Kind.NULL || node.kind === Kind.ENUM || node.kind === Kind.LIST || node.kind === Kind.OBJECT;\n}\nexport function isTypeNode(node) {\n  return node.kind === Kind.NAMED_TYPE || node.kind === Kind.LIST_TYPE || node.kind === Kind.NON_NULL_TYPE;\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;\n}\nexport function isTypeDefinitionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;\n}\n","import didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedScalarTypes } from \"../../type/scalars.mjs\";\nimport { introspectionTypes } from \"../../type/introspection.mjs\";\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\nexport function KnownTypeNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));\n  return {\n    NamedType: function NamedType(node, _1, parent, _2, ancestors) {\n      var typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;\n        var isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && isStandardTypeName(typeName)) {\n          return;\n        }\n\n        var suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(\"Unknown type \\\"\".concat(typeName, \"\\\".\") + didYouMean(suggestedTypes), node));\n      }\n    }\n  };\n}\nvar standardTypeNames = [].concat(specifiedScalarTypes, introspectionTypes).map(function (type) {\n  return type.name;\n});\n\nfunction isStandardTypeName(typeName) {\n  return standardTypeNames.indexOf(typeName) !== -1;\n}\n\nfunction isSDLNode(value) {\n  return !Array.isArray(value) && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));\n}\n","var _defKindToExtKind;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport invariant from \"../../jsutils/invariant.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode } from \"../../language/predicates.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  var schema = context.getSchema();\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n\n  function checkExtension(node) {\n    var typeName = node.name.value;\n    var defNode = definedTypes[typeName];\n    var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    var expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        var kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(new GraphQLError(\"Cannot extend non-\".concat(kindStr, \" type \\\"\").concat(typeName, \"\\\".\"), defNode ? [defNode, node] : node));\n      }\n    } else {\n      var allTypeNames = Object.keys(definedTypes);\n\n      if (schema) {\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\n      }\n\n      var suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(\"Cannot extend type \\\"\".concat(typeName, \"\\\" because it is not defined.\") + didYouMean(suggestedTypes), node.name));\n    }\n  }\n}\nvar defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected kind: ' + inspect(kind));\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport invariant from \"../../jsutils/invariant.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { DirectiveLocation } from \"../../language/directiveLocation.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n */\nexport function KnownDirectivesRule(context) {\n  var locationsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map(function (name) {\n        return name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: function Directive(node, _key, _parent, _path, ancestors) {\n      var name = node.name.value;\n      var locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(\"Unknown directive \\\"@\".concat(name, \"\\\".\"), node));\n        return;\n      }\n\n      var candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && locations.indexOf(candidateLocation) === -1) {\n        context.reportError(new GraphQLError(\"Directive \\\"@\".concat(name, \"\\\" may not be used on \").concat(candidateLocation, \".\"), node));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  var appliedTo = ancestors[ancestors.length - 1];\n  !Array.isArray(appliedTo) || invariant(0);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION:\n      {\n        var parentNode = ancestors[ancestors.length - 3];\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n      }\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case 'query':\n      return DirectiveLocation.QUERY;\n\n    case 'mutation':\n      return DirectiveLocation.MUTATION;\n\n    case 'subscription':\n      return DirectiveLocation.SUBSCRIPTION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected operation: ' + inspect(operation));\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  var uniqueDirectiveMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  var schemaDirectives = Object.create(null);\n  var typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      if (node.directives == null) {\n        return;\n      }\n\n      var seenDirectives;\n\n      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        var typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {\n        var _directive = _node$directives2[_i6];\n        var directiveName = _directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(new GraphQLError(\"The directive \\\"@\".concat(directiveName, \"\\\" can only be used once at this location.\"), [seenDirectives[directiveName], _directive]));\n          } else {\n            seenDirectives[directiveName] = _directive;\n          }\n        }\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\nexport function UniqueArgumentNamesRule(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(\"There can be only one argument named \\\"\".concat(argName, \"\\\".\"), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\nexport function UniqueInputFieldNamesRule(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        knownNames = knownNameStack.pop();\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(\"There can be only one input field named \\\"\".concat(fieldName, \"\\\".\"), [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isExecutableDefinitionNode } from \"../../language/predicates.mjs\";\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {\n        var definition = _node$definitions2[_i2];\n\n        if (!isExecutableDefinitionNode(definition)) {\n          var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), definition));\n        }\n      }\n\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread: function FragmentSpread(node) {\n      var fragmentName = node.name.value;\n      var fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(new GraphQLError(\"Unknown fragment \\\"\".concat(fragmentName, \"\\\".\"), node.name));\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\nexport function NoUnusedFragmentsRule(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {\n          var operation = operationDefs[_i2];\n\n          for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {\n            var fragment = _context$getRecursive2[_i4];\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {\n          var fragmentDef = fragmentDefs[_i6];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" is never used.\"), fragmentDef));\n          }\n        }\n      }\n    }\n  };\n}\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\nexport function KnownArgumentNamesRule(context) {\n  return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {\n    Argument: function Argument(argNode) {\n      var argDef = context.getArgument();\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        var argName = argNode.name.value;\n        var knownArgsNames = fieldDef.args.map(function (arg) {\n          return arg.name;\n        });\n        var suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on field \\\"\").concat(parentType.name, \".\").concat(fieldDef.name, \"\\\".\") + didYouMean(suggestions), argNode));\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  var directiveArgs = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    directiveArgs[directive.name] = directive.args.map(function (arg) {\n      return arg.name;\n    });\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      directiveArgs[def.name.value] = argsNodes.map(function (arg) {\n        return arg.name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: function Directive(directiveNode) {\n      var directiveName = directiveNode.name.value;\n      var knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {\n          var argNode = _directiveNode$argume2[_i6];\n          var argName = argNode.name.value;\n\n          if (knownArgs.indexOf(argName) === -1) {\n            var suggestions = suggestionList(argName, knownArgs);\n            context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on directive \\\"@\").concat(directiveName, \"\\\".\") + didYouMean(suggestions), argNode));\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}\n","import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\nimport { isType, isRequiredArgument } from \"../../type/definition.mjs\";\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n        var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n\n        for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {\n          var argDef = _fieldDef$args2[_i2];\n          var argNode = argNodeMap[argDef.name];\n\n          if (!argNode && isRequiredArgument(argDef)) {\n            var argTypeStr = inspect(argDef.type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" of type \\\"\").concat(argTypeStr, \"\\\" is required, but it was not provided.\"), fieldNode));\n          }\n        }\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var requiredArgsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {\n    var directive = definedDirectives[_i4];\n    requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), function (arg) {\n      return arg.name;\n    });\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {\n    var def = astDefinitions[_i6];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), function (arg) {\n        return arg.name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(directiveNode) {\n        var directiveName = directiveNode.name.value;\n        var requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n          var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n\n          var argNodeMap = keyMap(_argNodes, function (arg) {\n            return arg.name.value;\n          });\n\n          for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {\n            var argName = _Object$keys2[_i8];\n\n            if (!argNodeMap[argName]) {\n              var argType = requiredArgs[argName].type;\n              var argTypeStr = isType(argType) ? inspect(argType) : print(argType);\n              context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \\\"\").concat(argTypeStr, \"\\\" is required, but it was not provided.\"), directiveNode));\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isNonNullType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { isTypeSubTypeOf } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Variables passed to field arguments conform to type\n */\nexport function VariablesInAllowedPositionRule(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              var varTypeStr = inspect(varType);\n              var typeStr = inspect(type);\n              context.reportError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varTypeStr, \"\\\" used in position expecting type \\\"\").concat(typeStr, \"\\\".\"), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n","import find from \"../../polyfills/find.mjs\";\nimport objectEntries from \"../../polyfills/objectEntries.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subReason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \") + reasonMessage(subReason);\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {\n        var _ref3 = conflicts[_i2];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        var reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(\"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMsg, \". Use different aliases on the fields to fetch both if this was intentional.\"), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (var _i5 = 0, _objectEntries2 = objectEntries(fieldMap); _i5 < _objectEntries2.length; _i5++) {\n    var _ref5 = _objectEntries2[_i5];\n    var responseName = _ref5[0];\n    var fields = _ref5[1];\n\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {\n    var responseName = _Object$keys2[_i7];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n\n  if (!areMutuallyExclusive) {\n    var _node1$arguments, _node2$arguments;\n\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\\\"\".concat(name1, \"\\\" and \\\"\").concat(name2, \"\\\" are different fields\")], [node1], [node2]];\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n\n  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \\\"\".concat(inspect(type1), \"\\\" and \\\"\").concat(inspect(type2), \"\\\"\")], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {\n    var selection = _selectionSet$selecti2[_i9];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet = /*#__PURE__*/function () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    this._pairSetAdd(a, b, areMutuallyExclusive);\n\n    this._pairSetAdd(b, a, areMutuallyExclusive);\n  };\n\n  _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {\n    var map = this._data[a];\n\n    if (!map) {\n      map = Object.create(null);\n      this._data[a] = map;\n    }\n\n    map[b] = areMutuallyExclusive;\n  };\n\n  return PairSet;\n}();\n","// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from \"./rules/ExecutableDefinitionsRule.mjs\"; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from \"./rules/UniqueOperationNamesRule.mjs\"; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from \"./rules/LoneAnonymousOperationRule.mjs\"; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from \"./rules/SingleFieldSubscriptionsRule.mjs\"; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from \"./rules/KnownTypeNamesRule.mjs\"; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from \"./rules/FragmentsOnCompositeTypesRule.mjs\"; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from \"./rules/VariablesAreInputTypesRule.mjs\"; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from \"./rules/ScalarLeafsRule.mjs\"; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from \"./rules/FieldsOnCorrectTypeRule.mjs\"; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from \"./rules/UniqueFragmentNamesRule.mjs\"; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from \"./rules/KnownFragmentNamesRule.mjs\"; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from \"./rules/NoUnusedFragmentsRule.mjs\"; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from \"./rules/PossibleFragmentSpreadsRule.mjs\"; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from \"./rules/NoFragmentCyclesRule.mjs\"; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from \"./rules/UniqueVariableNamesRule.mjs\"; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from \"./rules/NoUndefinedVariablesRule.mjs\"; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from \"./rules/NoUnusedVariablesRule.mjs\"; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from \"./rules/KnownDirectivesRule.mjs\"; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from \"./rules/UniqueDirectivesPerLocationRule.mjs\"; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNamesRule, KnownArgumentNamesOnDirectivesRule } from \"./rules/KnownArgumentNamesRule.mjs\"; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from \"./rules/UniqueArgumentNamesRule.mjs\"; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from \"./rules/ValuesOfCorrectTypeRule.mjs\"; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArgumentsRule, ProvidedRequiredArgumentsOnDirectivesRule } from \"./rules/ProvidedRequiredArgumentsRule.mjs\"; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from \"./rules/VariablesInAllowedPositionRule.mjs\"; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from \"./rules/OverlappingFieldsCanBeMergedRule.mjs\"; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from \"./rules/UniqueInputFieldNamesRule.mjs\"; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from \"./rules/LoneSchemaDefinitionRule.mjs\";\nimport { UniqueOperationTypesRule } from \"./rules/UniqueOperationTypesRule.mjs\";\nimport { UniqueTypeNamesRule } from \"./rules/UniqueTypeNamesRule.mjs\";\nimport { UniqueEnumValueNamesRule } from \"./rules/UniqueEnumValueNamesRule.mjs\";\nimport { UniqueFieldDefinitionNamesRule } from \"./rules/UniqueFieldDefinitionNamesRule.mjs\";\nimport { UniqueDirectiveNamesRule } from \"./rules/UniqueDirectiveNamesRule.mjs\";\nimport { PossibleTypeExtensionsRule } from \"./rules/PossibleTypeExtensionsRule.mjs\";\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport var specifiedRules = Object.freeze([ExecutableDefinitionsRule, UniqueOperationNamesRule, LoneAnonymousOperationRule, SingleFieldSubscriptionsRule, KnownTypeNamesRule, FragmentsOnCompositeTypesRule, VariablesAreInputTypesRule, ScalarLeafsRule, FieldsOnCorrectTypeRule, UniqueFragmentNamesRule, KnownFragmentNamesRule, NoUnusedFragmentsRule, PossibleFragmentSpreadsRule, NoFragmentCyclesRule, UniqueVariableNamesRule, NoUndefinedVariablesRule, NoUnusedVariablesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, KnownArgumentNamesRule, UniqueArgumentNamesRule, ValuesOfCorrectTypeRule, ProvidedRequiredArgumentsRule, VariablesInAllowedPositionRule, OverlappingFieldsCanBeMergedRule, UniqueInputFieldNamesRule]);\n/**\n * @internal\n */\n\nexport var specifiedSDLRules = Object.freeze([LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, KnownArgumentNamesOnDirectivesRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, ProvidedRequiredArgumentsOnDirectivesRule]);\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\nexport function UniqueOperationNamesRule(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(\"There can be only one operation named \\\"\".concat(operationName.value, \"\\\".\"), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\nexport function LoneAnonymousOperationRule(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === Kind.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new GraphQLError('This anonymous operation must be the only defined operation.', node));\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Subscriptions must only include one field.\n *\n * A GraphQL subscription is valid only if it contains a single root field.\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        if (node.selectionSet.selections.length !== 1) {\n          context.reportError(new GraphQLError(node.name ? \"Subscription \\\"\".concat(node.name.value, \"\\\" must select only one top level field.\") : 'Anonymous Subscription must select only one top level field.', node.selectionSet.selections.slice(1)));\n        }\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), node.typeCondition));\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isInputType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type);\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        var typeName = print(node.type);\n        context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\"), node.type));\n      }\n    }\n  };\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), selectionSet));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n\n          var _typeStr = inspect(type);\n\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), node));\n        }\n      }\n    }\n  };\n}\n","import arrayFrom from \"../../polyfills/arrayFrom.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport naturalCompare from \"../../jsutils/naturalCompare.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isAbstractType } from \"../../type/definition.mjs\";\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n\n          context.reportError(new GraphQLError(\"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type.name, \"\\\".\") + suggestion, node));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  var suggestedTypes = new Set();\n  var usageCount = Object.create(null);\n\n  for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {\n    var possibleType = _schema$getPossibleTy2[_i2];\n\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {\n      var _usageCount$possibleI;\n\n      var possibleInterface = _possibleType$getInte2[_i4];\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\n    }\n  }\n\n  return arrayFrom(suggestedTypes).sort(function (typeA, typeB) {\n    // Suggest both interface and object types based on how common they are.\n    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n\n    return naturalCompare(typeA.name, typeB.name);\n  }).map(function (x) {\n    return x.name;\n  });\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\nexport function UniqueFragmentNamesRule(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(\"There can be only one fragment named \\\"\".concat(fragmentName, \"\\\".\"), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {\n      var spreadNode = spreadNodes[_i2];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var viaPath = cyclePath.slice(0, -1).map(function (s) {\n          return '\"' + s.name.value + '\"';\n        }).join(', ');\n        context.reportError(new GraphQLError(\"Cannot spread fragment \\\"\".concat(spreadName, \"\\\" within itself\") + (viaPath !== '' ? \" via \".concat(viaPath, \".\") : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(\"There can be only one variable named \\\"$\".concat(variableName, \"\\\".\"), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\nexport function NoUndefinedVariablesRule(context) {\n  var variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(varName, \"\\\" is not defined by operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is not defined.\"), [node, operation]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\nexport function NoUnusedVariablesRule(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {\n          var variableDef = _variableDefs2[_i4];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(variableName, \"\\\" is never used in operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(variableName, \"\\\" is never used.\"), variableDef));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}\n","function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport { Kind } from \"../language/kinds.mjs\";\nimport { visit } from \"../language/visitor.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport var ASTValidationContext = /*#__PURE__*/function () {\n  function ASTValidationContext(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  var _proto = ASTValidationContext.prototype;\n\n  _proto.reportError = function reportError(error) {\n    this._onError(error);\n  };\n\n  _proto.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  _proto.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  };\n\n  _proto.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n\n        for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {\n          var selection = _set$selections2[_i2];\n\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  };\n\n  _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        var node = nodesToVisit.pop();\n\n        for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {\n          var spread = _this$getFragmentSpre2[_i4];\n          var fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  };\n\n  return ASTValidationContext;\n}();\nexport var SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext) {\n  _inheritsLoose(SDLValidationContext, _ASTValidationContext);\n\n  function SDLValidationContext(ast, schema, onError) {\n    var _this;\n\n    _this = _ASTValidationContext.call(this, ast, onError) || this;\n    _this._schema = schema;\n    return _this;\n  }\n\n  var _proto2 = SDLValidationContext.prototype;\n\n  _proto2.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return SDLValidationContext;\n}(ASTValidationContext);\nexport var ValidationContext = /*#__PURE__*/function (_ASTValidationContext2) {\n  _inheritsLoose(ValidationContext, _ASTValidationContext2);\n\n  function ValidationContext(schema, ast, typeInfo, onError) {\n    var _this2;\n\n    _this2 = _ASTValidationContext2.call(this, ast, onError) || this;\n    _this2._schema = schema;\n    _this2._typeInfo = typeInfo;\n    _this2._variableUsages = new Map();\n    _this2._recursiveVariableUsages = new Map();\n    return _this2;\n  }\n\n  var _proto3 = ValidationContext.prototype;\n\n  _proto3.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  _proto3.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {\n        var frag = _this$getRecursivelyR2[_i6];\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  _proto3.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  _proto3.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  _proto3.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  _proto3.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  _proto3.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  _proto3.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  _proto3.getEnumValue = function getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  };\n\n  return ValidationContext;\n}(ASTValidationContext);\n","import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { visit, visitInParallel } from \"../language/visitor.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\nimport { specifiedRules, specifiedSDLRules } from \"./specifiedRules.mjs\";\nimport { SDLValidationContext, ValidationContext } from \"./ValidationContext.mjs\";\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    maxErrors: undefined\n  };\n  documentAST || devAssert(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var abortObj = Object.freeze({});\n  var errors = [];\n  var context = new ValidationContext(schema, documentAST, typeInfo, function (error) {\n    if (options.maxErrors != null && errors.length >= options.maxErrors) {\n      errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var errors = [];\n  var context = new SDLValidationContext(documentAST, schemaToExtend, function (error) {\n    errors.push(error);\n  });\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n","import invariant from \"../../../jsutils/invariant.mjs\";\nimport { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType, isInputObjectType } from \"../../../type/definition.mjs\";\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var fieldDef = context.getFieldDef();\n      var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        var parentType = context.getParentType();\n        parentType != null || invariant(0);\n        context.reportError(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n      }\n    },\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n      var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        var directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        } else {\n          var parentType = context.getParentType();\n          var fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || invariant(0);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(parentType.name, \".\").concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off\n\n        var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(new GraphQLError(\"The input field \".concat(inputObjectDef.name, \".\").concat(inputFieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumValueDef = context.getEnumValue();\n      var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        var enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(0);\n        context.reportError(new GraphQLError(\"The enum value \\\"\".concat(enumTypeDef.name, \".\").concat(enumValueDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n      }\n    }\n  };\n}\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport { Kind, specifiedRules, NoUnusedFragmentsRule, ExecutableDefinitionsRule, KnownFragmentNamesRule, validate, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, print, parse, GraphQLError, NoDeprecatedCustomRule } from \"graphql\";\nimport \"./index.es.js\";\nimport { R as Range, P as Position, C as CharacterStream } from \"./Range.es.js\";\nimport { o as onlineParser } from \"./onlineParser.es.js\";\nimport \"react\";\nimport \"react-dom\";\nconst specifiedSDLRules = [\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule\n];\nfunction validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n  const rules = specifiedRules.filter((rule) => {\n    if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n      return false;\n    }\n    if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n      return false;\n    }\n    return true;\n  });\n  if (customRules) {\n    Array.prototype.push.apply(rules, customRules);\n  }\n  if (isSchemaDocument) {\n    Array.prototype.push.apply(rules, specifiedSDLRules);\n  }\n  const errors = validate(schema, ast, rules);\n  return errors.filter((error) => {\n    if (error.message.indexOf(\"Unknown directive\") !== -1 && error.nodes) {\n      const node = error.nodes[0];\n      if (node && node.kind === Kind.DIRECTIVE) {\n        const name = node.name.value;\n        if (name === \"arguments\" || name === \"argumentDefinitions\") {\n          return false;\n        }\n      }\n    }\n    return true;\n  });\n}\n__name(validateWithCustomRules, \"validateWithCustomRules\");\nconst SEVERITY$1 = {\n  Error: \"Error\",\n  Warning: \"Warning\",\n  Information: \"Information\",\n  Hint: \"Hint\"\n};\nconst DIAGNOSTIC_SEVERITY = {\n  [SEVERITY$1.Error]: 1,\n  [SEVERITY$1.Warning]: 2,\n  [SEVERITY$1.Information]: 3,\n  [SEVERITY$1.Hint]: 4\n};\nconst invariant = /* @__PURE__ */ __name((condition, message) => {\n  if (!condition) {\n    throw new Error(message);\n  }\n}, \"invariant\");\nfunction getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n  var _a, _b;\n  let ast = null;\n  if (externalFragments) {\n    if (typeof externalFragments === \"string\") {\n      query += \"\\n\\n\" + externalFragments;\n    } else {\n      query += \"\\n\\n\" + externalFragments.reduce((agg, node) => {\n        agg += print(node) + \"\\n\\n\";\n        return agg;\n      }, \"\");\n    }\n  }\n  try {\n    ast = parse(query);\n  } catch (error) {\n    if (error instanceof GraphQLError) {\n      const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, query);\n      return [\n        {\n          severity: DIAGNOSTIC_SEVERITY.Error,\n          message: error.message,\n          source: \"GraphQL: Syntax\",\n          range\n        }\n      ];\n    }\n    throw error;\n  }\n  return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\n__name(getDiagnostics, \"getDiagnostics\");\nfunction validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n  if (!schema) {\n    return [];\n  }\n  const validationErrorAnnotations = mapCat(validateWithCustomRules(schema, ast, customRules, isRelayCompatMode), (error) => annotations(error, DIAGNOSTIC_SEVERITY.Error, \"Validation\"));\n  const deprecationWarningAnnotations = mapCat(validate(schema, ast, [NoDeprecatedCustomRule]), (error) => annotations(error, DIAGNOSTIC_SEVERITY.Warning, \"Deprecation\"));\n  return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\n__name(validateQuery, \"validateQuery\");\nfunction mapCat(array, mapper) {\n  return Array.prototype.concat.apply([], array.map(mapper));\n}\n__name(mapCat, \"mapCat\");\nfunction annotations(error, severity, type) {\n  if (!error.nodes) {\n    return [];\n  }\n  const highlightedNodes = [];\n  error.nodes.forEach((node) => {\n    const highlightNode = node.kind !== \"Variable\" && \"name\" in node && node.name !== void 0 ? node.name : \"variable\" in node && node.variable !== void 0 ? node.variable : node;\n    if (highlightNode) {\n      invariant(error.locations, \"GraphQL validation error requires locations.\");\n      const loc = error.locations[0];\n      const highlightLoc = getLocation(highlightNode);\n      const end = loc.column + (highlightLoc.end - highlightLoc.start);\n      highlightedNodes.push({\n        source: `GraphQL: ${type}`,\n        message: error.message,\n        severity,\n        range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end))\n      });\n    }\n  });\n  return highlightedNodes;\n}\n__name(annotations, \"annotations\");\nfunction getRange(location, queryText) {\n  const parser = onlineParser();\n  const state = parser.startState();\n  const lines = queryText.split(\"\\n\");\n  invariant(lines.length >= location.line, \"Query text must have more lines than where the error happened\");\n  let stream = null;\n  for (let i = 0; i < location.line; i++) {\n    stream = new CharacterStream(lines[i]);\n    while (!stream.eol()) {\n      const style = parser.token(stream, state);\n      if (style === \"invalidchar\") {\n        break;\n      }\n    }\n  }\n  invariant(stream, \"Expected Parser stream to be available.\");\n  const line = location.line - 1;\n  const start = stream.getStartOfToken();\n  const end = stream.getCurrentPosition();\n  return new Range(new Position(line, start), new Position(line, end));\n}\n__name(getRange, \"getRange\");\nfunction getLocation(node) {\n  const typeCastedNode = node;\n  const location = typeCastedNode.loc;\n  invariant(location, \"Expected ASTNode to have a location.\");\n  return location;\n}\n__name(getLocation, \"getLocation\");\nconst SEVERITY = [\"error\", \"warning\", \"information\", \"hint\"];\nconst TYPE = {\n  \"GraphQL: Validation\": \"validation\",\n  \"GraphQL: Deprecation\": \"deprecation\",\n  \"GraphQL: Syntax\": \"syntax\"\n};\nCodeMirror.registerHelper(\"lint\", \"graphql\", (text, options) => {\n  const schema = options.schema;\n  const rawResults = getDiagnostics(text, schema, options.validationRules, void 0, options.externalFragments);\n  const results = rawResults.map((error) => ({\n    message: error.message,\n    severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n    type: error.source ? TYPE[error.source] : void 0,\n    from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n    to: CodeMirror.Pos(error.range.end.line, error.range.end.character)\n  }));\n  return results;\n});\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { i as isIgnored, L as LexRules, P as ParseRules } from \"./index.es.js\";\nimport { Kind } from \"graphql\";\nfunction onlineParser(options = {\n  eatWhitespace: (stream) => stream.eatWhile(isIgnored),\n  lexRules: LexRules,\n  parseRules: ParseRules,\n  editorConfig: {}\n}) {\n  return {\n    startState() {\n      const initialState = {\n        level: 0,\n        step: 0,\n        name: null,\n        kind: null,\n        type: null,\n        rule: null,\n        needsSeparator: false,\n        prevState: null\n      };\n      pushRule(options.parseRules, initialState, Kind.DOCUMENT);\n      return initialState;\n    },\n    token(stream, state) {\n      return getToken(stream, state, options);\n    }\n  };\n}\n__name(onlineParser, \"onlineParser\");\nfunction getToken(stream, state, options) {\n  var _a;\n  if (state.inBlockstring) {\n    if (stream.match(/.*\"\"\"/)) {\n      state.inBlockstring = false;\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n  const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n  if (state.rule && state.rule.length === 0) {\n    popRule(state);\n  } else if (state.needsAdvance) {\n    state.needsAdvance = false;\n    advanceRule(state, true);\n  }\n  if (stream.sol()) {\n    const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n    state.indentLevel = Math.floor(stream.indentation() / tabSize);\n  }\n  if (eatWhitespace(stream)) {\n    return \"ws\";\n  }\n  const token = lex(lexRules, stream);\n  if (!token) {\n    const matchedSomething = stream.match(/\\S+/);\n    if (!matchedSomething) {\n      stream.match(/\\s/);\n    }\n    pushRule(SpecialParseRules, state, \"Invalid\");\n    return \"invalidchar\";\n  }\n  if (token.kind === \"Comment\") {\n    pushRule(SpecialParseRules, state, \"Comment\");\n    return \"comment\";\n  }\n  const backupState = assign({}, state);\n  if (token.kind === \"Punctuation\") {\n    if (/^[{([]/.test(token.value)) {\n      if (state.indentLevel !== void 0) {\n        state.levels = (state.levels || []).concat(state.indentLevel + 1);\n      }\n    } else if (/^[})\\]]/.test(token.value)) {\n      const levels = state.levels = (state.levels || []).slice(0, -1);\n      if (state.indentLevel) {\n        if (levels.length > 0 && levels[levels.length - 1] < state.indentLevel) {\n          state.indentLevel = levels[levels.length - 1];\n        }\n      }\n    }\n  }\n  while (state.rule) {\n    let expected = typeof state.rule === \"function\" ? state.step === 0 ? state.rule(token, stream) : null : state.rule[state.step];\n    if (state.needsSeparator) {\n      expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n    }\n    if (expected) {\n      if (expected.ofRule) {\n        expected = expected.ofRule;\n      }\n      if (typeof expected === \"string\") {\n        pushRule(parseRules, state, expected);\n        continue;\n      }\n      if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n        if (expected.update) {\n          expected.update(state, token);\n        }\n        if (token.kind === \"Punctuation\") {\n          advanceRule(state, true);\n        } else {\n          state.needsAdvance = true;\n        }\n        return expected.style;\n      }\n    }\n    unsuccessful(state);\n  }\n  assign(state, backupState);\n  pushRule(SpecialParseRules, state, \"Invalid\");\n  return \"invalidchar\";\n}\n__name(getToken, \"getToken\");\nfunction assign(to, from) {\n  const keys = Object.keys(from);\n  for (let i = 0; i < keys.length; i++) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n__name(assign, \"assign\");\nconst SpecialParseRules = {\n  Invalid: [],\n  Comment: []\n};\nfunction pushRule(rules, state, ruleKind) {\n  if (!rules[ruleKind]) {\n    throw new TypeError(\"Unknown rule: \" + ruleKind);\n  }\n  state.prevState = Object.assign({}, state);\n  state.kind = ruleKind;\n  state.name = null;\n  state.type = null;\n  state.rule = rules[ruleKind];\n  state.step = 0;\n  state.needsSeparator = false;\n}\n__name(pushRule, \"pushRule\");\nfunction popRule(state) {\n  if (!state.prevState) {\n    return;\n  }\n  state.kind = state.prevState.kind;\n  state.name = state.prevState.name;\n  state.type = state.prevState.type;\n  state.rule = state.prevState.rule;\n  state.step = state.prevState.step;\n  state.needsSeparator = state.prevState.needsSeparator;\n  state.prevState = state.prevState.prevState;\n}\n__name(popRule, \"popRule\");\nfunction advanceRule(state, successful) {\n  var _a;\n  if (isList(state) && state.rule) {\n    const step = state.rule[state.step];\n    if (step.separator) {\n      const separator = step.separator;\n      state.needsSeparator = !state.needsSeparator;\n      if (!state.needsSeparator && separator.ofRule) {\n        return;\n      }\n    }\n    if (successful) {\n      return;\n    }\n  }\n  state.needsSeparator = false;\n  state.step++;\n  while (state.rule && !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n    popRule(state);\n    if (state.rule) {\n      if (isList(state)) {\n        if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n          state.needsSeparator = !state.needsSeparator;\n        }\n      } else {\n        state.needsSeparator = false;\n        state.step++;\n      }\n    }\n  }\n}\n__name(advanceRule, \"advanceRule\");\nfunction isList(state) {\n  const step = Array.isArray(state.rule) && typeof state.rule[state.step] !== \"string\" && state.rule[state.step];\n  return step && step.isList;\n}\n__name(isList, \"isList\");\nfunction unsuccessful(state) {\n  while (state.rule && !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n    popRule(state);\n  }\n  if (state.rule) {\n    advanceRule(state, false);\n  }\n}\n__name(unsuccessful, \"unsuccessful\");\nfunction lex(lexRules, stream) {\n  const kinds = Object.keys(lexRules);\n  for (let i = 0; i < kinds.length; i++) {\n    const match = stream.match(lexRules[kinds[i]]);\n    if (match && match instanceof Array) {\n      return { kind: kinds[i], value: match[0] };\n    }\n  }\n}\n__name(lex, \"lex\");\nexport { onlineParser as o };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","CharacterStream","constructor","sourceText","this","getStartOfToken","_start","getCurrentPosition","_pos","eol","_sourceText","length","sol","peek","charAt","next","char","eat","pattern","_testNextCharacter","eatWhile","match","isMatched","didEat","eatSpace","skipToEnd","skipTo","position","consume","caseFold","token","RegExp","test","substr","slice","Array","startsWith","backUp","num","column","indentation","indent","whiteSpaces","pos","charCodeAt","current","character","Range","start","end","containsPosition","line","setStart","Position","setEnd","lessThanOrEqualTo","setLine","setCharacter","LoneSchemaDefinitionRule","context","_ref","_ref2","_oldSchema$astNode","oldSchema","getSchema","alreadyDefined","astNode","getQueryType","getMutationType","getSubscriptionType","schemaDefinitionsCount","SchemaDefinition","node","reportError","GraphQLError","UniqueOperationTypesRule","schema","definedOperationTypes","create","existingOperationTypes","query","mutation","subscription","checkOperationTypes","SchemaExtension","_node$operationTypes","operationTypesNodes","operationTypes","_i2","operationType","operation","alreadyDefinedOperationType","concat","UniqueTypeNamesRule","knownTypeNames","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","typeName","name","getType","UniqueEnumValueNamesRule","existingTypeMap","getTypeMap","knownValueNames","checkValueUniqueness","EnumTypeExtension","_node$values","valueNodes","values","valueNames","valueDef","valueName","existingType","getValue","UniqueFieldDefinitionNamesRule","knownFieldNames","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeExtension","ObjectTypeExtension","_node$fields","fieldNodes","fields","fieldNames","fieldDef","fieldName","hasField","type","getFields","UniqueDirectiveNamesRule","knownDirectiveNames","DirectiveDefinition","directiveName","getDirective","isExecutableDefinitionNode","kind","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","KnownTypeNamesRule","existingTypesMap","definedTypes","_context$getDocument$2","getDocument","definitions","def","typeNames","keys","NamedType","_1","parent","_2","ancestors","_ancestors$","definitionNode","isSDL","isArray","standardTypeNames","indexOf","isStandardTypeName","suggestedTypes","suggestionList","didYouMean","introspection","map","_defKindToExtKind","KnownDirectivesRule","locationsMap","definedDirectives","getDirectives","directive","locations","astDefinitions","_i4","Directive","_key","_parent","_path","candidateLocation","appliedTo","invariant","inspect","getDirectiveLocationForOperation","getDirectiveLocationForASTPath","UniqueDirectivesPerLocationRule","uniqueDirectiveMap","isRepeatable","repeatable","schemaDirectives","typeDirectivesMap","enter","directives","seenDirectives","undefined","_i6","_node$directives2","_directive","_defineProperty","obj","key","enumerable","writable","PossibleTypeExtensionsRule","ScalarTypeExtension","checkExtension","UnionTypeExtension","expectedKind","defNode","defKindToExtKind","typeToExtKind","kindStr","extensionKindToTypeName","allTypeNames","UniqueArgumentNamesRule","knownArgNames","Field","Argument","argName","UniqueInputFieldNamesRule","knownNameStack","knownNames","ObjectValue","push","leave","pop","ObjectField","ExecutableDefinitionsRule","Document","_node$definitions2","definition","defName","KnownFragmentNamesRule","FragmentSpread","fragmentName","getFragment","NoUnusedFragmentsRule","operationDefs","fragmentDefs","OperationDefinition","FragmentDefinition","fragmentNameUsed","_context$getRecursive2","getRecursivelyReferencedFragments","fragmentDef","fragName","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","KnownArgumentNamesOnDirectivesRule","directiveArgs","args","arg","_def$arguments","argsNodes","directiveNode","knownArgs","_directiveNode$argume2","argNode","suggestions","isValidValueNode","locationType","getInputType","parseLiteral","_typeStr","error","_typeStr2","message","typeStr","ProvidedRequiredArgumentsOnDirectivesRule","requiredArgsMap","keyMap","argNodes","isRequiredArgumentNode","requiredArgs","_directiveNode$argume","_argNodes","argNodeMap","_i8","_Object$keys2","argType","argTypeStr","defaultValue","allowedVariableUsage","varType","varDefaultValue","locationDefaultValue","nullableLocationType","ofType","reasonMessage","reason","responseName","subReason","join","collectConflictsBetweenFieldsAndFragment","conflicts","cachedFieldsAndFragmentNames","comparedFragmentPairs","areMutuallyExclusive","fieldMap","fragment","_getReferencedFieldsA","getReferencedFieldsAndFragmentNames","fieldMap2","fragmentNames2","collectConflictsBetween","collectConflictsBetweenFragments","fragmentName1","fragmentName2","has","add","fragment1","fragment2","_getReferencedFieldsA2","fieldMap1","fragmentNames1","_getReferencedFieldsA3","j","parentFieldsAreMutuallyExclusive","_i7","fields2","fields1","conflict","findConflict","field1","field2","parentType1","node1","def1","parentType2","node2","def2","_node1$arguments","_node2$arguments","name1","name2","arguments1","arguments2","every","argument1","value1","value2","argument2","find","argument","sameArguments","type1","type2","doTypesConflict","selectionSet1","selectionSet","selectionSet2","_getFieldsAndFragment2","getFieldsAndFragmentNames","_getFieldsAndFragment3","_i3","_j","findConflictsBetweenSubSelectionSets","_ref6","reduce","allFields","_ref7","_ref8","subfieldConflicts","parentType","cached","get","nodeAndDefs","fragmentNames","_collectFieldsAndFragmentNames","set","fragmentType","typeFromAST","typeCondition","_i9","_selectionSet$selecti2","selections","selection","alias","inlineFragmentType","PairSet","_data","_proto","prototype","a","b","first","result","_pairSetAdd","specifiedRules","freeze","knownOperationNames","operationName","operationCount","InlineFragment","VariableDefinition","variableName","variable","_fieldName","getParentType","getFieldDef","suggestion","Set","usageCount","_schema$getPossibleTy2","getPossibleTypes","possibleType","_possibleType$getInte2","getInterfaces","_usageCount$possibleI","possibleInterface","arrayFrom","sort","typeA","typeB","usageCountDiff","isSubType","naturalCompare","x","getSuggestedTypeNames","possibleFieldNames","getSuggestedFieldNames","knownFragmentNames","fragType","parentTypeStr","fragTypeStr","frag","getFragmentType","visitedFrags","spreadPath","spreadPathIndexByName","detectCycleRecursive","spreadNodes","getFragmentSpreads","spreadNode","spreadName","cycleIndex","spreadFragment","cyclePath","viaPath","s","knownVariableNames","variableNameDefined","usages","getRecursiveVariableUsages","varName","variableDefs","variableNameUsed","_variableDefs2","variableDef","argDef","getArgument","knownArgsNames","ListValue","getParentInputType","fieldNodeMap","field","_objectValues2","objectValues","NullValue","EnumValue","IntValue","FloatValue","StringValue","BooleanValue","fieldNode","_fieldNode$arguments","_fieldDef$args2","varDefMap","varDef","varTypeStr","Map","SelectionSet","_getFieldsAndFragment","_i5","_objectEntries2","objectEntries","_ref5","collectConflictsWithin","findConflictsWithinSelectionSet","_ref3","_ref2$","reasonMsg","_inheritsLoose","subClass","superClass","__proto__","ASTValidationContext","ast","onError","_ast","_fragments","_fragmentSpreads","_recursivelyReferencedFragments","_onError","fragments","frags","statement","spreads","setsToVisit","_set$selections2","collectedNames","nodesToVisit","_this$getFragmentSpre2","ValidationContext","_ASTValidationContext2","typeInfo","_this2","call","_schema","_typeInfo","_variableUsages","_recursiveVariableUsages","_proto3","getVariableUsages","newUsages","TypeInfo","Variable","getDefaultValue","_this$getRecursivelyR2","getEnumValue","documentAST","rules","options","maxErrors","devAssert","abortObj","errors","visitor","rule","e","NoDeprecatedCustomRule","deprecationReason","directiveDef","inputObjectDef","inputFieldDef","enumValueDef","enumTypeDef","validateWithCustomRules","customRules","isRelayCompatMode","isSchemaDocument","nodes","DIAGNOSTIC_SEVERITY","condition","Error","getDiagnostics","externalFragments","_a","_b","agg","range","getRange","severity","validateQuery","validationErrorAnnotations","mapCat","annotations","deprecationWarningAnnotations","Warning","array","mapper","highlightedNodes","highlightNode","loc","highlightLoc","getLocation","R","P","location","queryText","parser","o","state","startState","lines","split","stream","C","SEVERITY","TYPE","text","validationRules","from","to","onlineParser","eatWhitespace","lexRules","L","parseRules","editorConfig","initialState","level","step","needsSeparator","prevState","pushRule","getToken","inBlockstring","popRule","needsAdvance","advanceRule","tabSize","indentLevel","Math","floor","lex","SpecialParseRules","backupState","assign","levels","expected","separator","ofRule","update","style","unsuccessful","Invalid","Comment","ruleKind","TypeError","successful","isList","kinds"],"sourceRoot":""}